<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zanshin.Domain</name>
    </assembly>
    <members>
        <member name="T:Zanshin.Domain.Collections.BasePagination">
            <summary></summary>
        </member>
        <member name="P:Zanshin.Domain.Collections.BasePagination.TotalPages">
            <summary>
              Gets or sets the total pages.
            </summary>
            <value> The total pages. </value>
        </member>
        <member name="P:Zanshin.Domain.Collections.BasePagination.PageArraySize">
            <summary>
              Gets or sets the size of the page array.
            </summary>
            <value> The size of the page array. </value>
        </member>
        <member name="P:Zanshin.Domain.Collections.BasePagination.PageNumber">
            <summary>
              Gets or sets the page number.
            </summary>
            <value> The page number. </value>
        </member>
        <member name="T:Zanshin.Domain.Collections.IPagination">
            <summary>
            A collection of objects that has been split into pages.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Collections.IPagination.PageNumber">
            <summary>
            The current page number
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Collections.IPagination.PageSize">
            <summary>
            The number of items in each page.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Collections.IPagination.TotalItems">
            <summary>
            The total number of items.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Collections.IPagination.TotalPages">
            <summary>
            The total number of pages.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Collections.IPagination.FirstItem">
            <summary>
            The index of the first item in the page.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Collections.IPagination.LastItem">
            <summary>
            The index of the last item in the page.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Collections.IPagination.HasPreviousPage">
            <summary>
            Whether there are pages before the current page.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Collections.IPagination.HasNextPage">
            <summary>
            Whether there are pages after the current page.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Collections.IPagination`1">
            <summary>
            Generic form of <see cref="T:Zanshin.Domain.Collections.IPagination"/>
            </summary>
            <typeparam name="T">Type of object being paged</typeparam>
        </member>
        <member name="T:Zanshin.Domain.Collections.CustomPagination`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Zanshin.Domain.Collections.CustomPagination`1.DefaultPageSize">
            <summary>The default page size</summary>
        </member>
        <member name="F:Zanshin.Domain.Collections.CustomPagination`1.DefaultPageArraySize">
            <summary>The default page array size</summary>
        </member>
        <member name="M:Zanshin.Domain.Collections.CustomPagination`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Collections.CustomPagination`1" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
        </member>
        <member name="M:Zanshin.Domain.Collections.CustomPagination`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Collections.CustomPagination`1" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="pageNumber">The page number.</param>
            <exception cref="T:System.TypeInitializationException">new ParameterNullException(dataSource)</exception>
        </member>
        <member name="M:Zanshin.Domain.Collections.CustomPagination`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Collections.CustomPagination`1" /> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <exception cref="T:System.TypeInitializationException">new ParameterNullException(dataSource)</exception>
        </member>
        <member name="M:Zanshin.Domain.Collections.CustomPagination`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
              Creates a new instance of CustomPagination
            </summary>
            <param name="dataSource"> A pre-paged slice of data </param>
            <param name="pageNumber"> The current page number </param>
            <param name="pageSize"> The number of items per page </param>
            <param name="totalItems"> The total number of items in the overall datasource </param>
            <exception cref="T:System.TypeInitializationException">new ParameterNullException(dataSource)</exception>
        </member>
        <member name="M:Zanshin.Domain.Collections.CustomPagination`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of CustomPagination
            </summary>
            <param name="dataSource">A pre-paged slice of data</param>
            <param name="pageNumber">The current page number</param>
            <param name="pageSize">The number of items per page</param>
            <param name="totalItems">The total number of items in the overall datasource</param>
            <param name="useDataSourceAsCurrentPage">if set to <c>true</c> [use data source as current page].</param>
            <exception cref="T:System.TypeInitializationException">new ParameterNullException(dataSource)</exception>
            <exception cref="T:Zanshin.Domain.Exceptions.ParameterNullException">dataSource</exception>
        </member>
        <member name="M:Zanshin.Domain.Collections.CustomPagination`1.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:Zanshin.Domain.Collections.CustomPagination`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection. </returns>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <value>
            The item
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.PageNumber">
            <summary>
            The current page number
            </summary>
            <value>
            The page number.
            </value>
            <remarks>
            When setting the page number value, if the specified value is greater than the total 
            number of pages, then the total page number is used. If the specified value is less than one, then one is used.
            </remarks>
            <exception cref="T:System.ArgumentNullException" accessor="set">syncRoot</exception>
            <exception cref="T:Zanshin.Domain.Extensions.LockTimeoutException" accessor="set">Condition.</exception>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.StartingIndex">
            <summary>
              Gets the index of the first item at the current page number. This is based upon the page size.
            </summary>
            <value> The index of the starting. </value>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.CurrentPage">
            <summary>
              Gets the current page.
            </summary>
            <value> The current page. </value>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.PageSize">
            <summary>
              The number of items in each page.
            </summary>
            <value> </value>
            <remarks>
              If page size is not set then the <c>DefaultPageSize</c> (10) is returned.
            </remarks>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.TotalItems">
            <summary>
              The total number of items.
            </summary>
            <value> </value>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.TotalPages">
            <summary>
              The total number of pages.
            </summary>
            <value> </value>
            <remarks>
              The setter is only on this property to allow the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> to serialize this object. If the setter is explicitly used in consumers, then all bets are off!
            </remarks>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.FirstItem">
            <summary>
              The index of the first item in the page.
            </summary>
            <value> </value>
            <exception cref="T:System.ArgumentNullException" accessor="get">syncRoot</exception>
            <exception cref="T:Zanshin.Domain.Extensions.LockTimeoutException" accessor="get">Condition.</exception>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.LastItem">
            <summary>
              The index of the last item in the page.
            </summary>
            <value> </value>
            <remarks>
              This property is NOT returning the value one might expect.
            </remarks>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.HasPreviousPage">
            <summary>
              Whether there are pages before the current page.
            </summary>
            <value> </value>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.HasNextPage">
            <summary>
              Whether there are pages after the current page.
            </summary>
            <value> </value>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.PageArray">
            <summary>
              Gets the page array.
            </summary>
            <value> The page array. </value>
            <exception cref="T:System.ArgumentNullException" accessor="get">syncRoot</exception>
            <exception cref="T:Zanshin.Domain.Extensions.LockTimeoutException" accessor="get">Condition.</exception>
            <exception cref="T:System.OverflowException" accessor="get"><paramref>
              <name>value</name>
            </paramref>
            is less than <see cref="F:System.TimeSpan.MinValue" />
            or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref><name>value</name></paramref>
            is <see cref="F:System.Double.PositiveInfinity" />.
            -or-<paramref><name>value</name></paramref>
            is <see cref="F:System.Double.NegativeInfinity" />.</exception>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.PageArraySize">
            <summary>
              Gets or sets the size of the page array.
            </summary>
            <value> The size of the page array. </value>
            <remarks>
              If you override the setter of this property in a derived class, then you MUST either recreate the logic in this base class or ensure that call base.PageArraySize = x in your derived class, failure to do so <b>WILL</b> result in unpredictable results.
            </remarks>
        </member>
        <member name="P:Zanshin.Domain.Collections.CustomPagination`1.PageArrayBuilder">
            <summary>
              Gets the page array builder.
            </summary>
            <value> The page array builder. </value>
        </member>
        <member name="M:Zanshin.Domain.Collections.CustomPagination`1.EnsurePageArray">
            <summary>
              Ensures the page array.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Collections.CustomPagination`1.BuildPageArray">
            <summary>
              Builds the page array.
            </summary>
            <returns> </returns>
        </member>
        <member name="T:Zanshin.Domain.Collections.SerializablePagination`1">
            <summary></summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Zanshin.Domain.Collections.SerializablePagination`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Zanshin.Domain.Collections.SerializablePagination`1" /> class.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Collections.SerializablePagination`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Zanshin.Domain.Collections.CustomPagination`1" /> class.
            </summary>
            <param name="dataSource"> The data source. </param>
        </member>
        <member name="M:Zanshin.Domain.Collections.SerializablePagination`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Zanshin.Domain.Collections.CustomPagination`1" /> class.
            </summary>
            <param name="dataSource"> The data source. </param>
            <param name="pageNumber"> The page number. </param>
        </member>
        <member name="M:Zanshin.Domain.Collections.SerializablePagination`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Zanshin.Domain.Collections.CustomPagination`1" /> class.
            </summary>
            <param name="dataSource"> The data source. </param>
            <param name="pageNumber"> The page number. </param>
            <param name="pageSize"> Size of the page. </param>
        </member>
        <member name="P:Zanshin.Domain.Collections.SerializablePagination`1.StartingIndex">
            <summary>
              Gets the index of the first item at the current page number. This is based upon the page size.
            </summary>
            <value> The index of the starting. </value>
        </member>
        <member name="P:Zanshin.Domain.Collections.SerializablePagination`1.PageArray">
            <summary>
              Gets the page array.
            </summary>
            <value> The page array. </value>
        </member>
        <member name="P:Zanshin.Domain.Collections.SerializablePagination`1.PageArraySize">
            <summary>
              Gets or sets the size of the page array.
            </summary>
            <value> The size of the page array. </value>
            <remarks>
              If you override the setter of this property in a derived class, then you MUST either recreate the logic in this base class or ensure that call base.PageArraySize = x in your derived class, failure to do so <b>WILL</b> result in unpredictable results.
            </remarks>
        </member>
        <member name="P:Zanshin.Domain.Collections.SerializablePagination`1.PageNumber">
            <summary>
              The current page number
            </summary>
            <value> </value>
            <remarks>
              When setting the page number value, if the specified value is greater than the total number of pages, then the total page number is used. If the specified value is less than one, then one is used.
            </remarks>
        </member>
        <member name="P:Zanshin.Domain.Collections.SerializablePagination`1.CurrentPage">
            <summary>
              Gets the current page.
            </summary>
            <value> The current page. </value>
        </member>
        <member name="P:Zanshin.Domain.Collections.SerializablePagination`1.PageSize">
            <summary>
              The number of items in each page.
            </summary>
            <value> </value>
            <remarks>
              If page size is not set then the <c>DefaultPageSize</c> (10) is returned.
            </remarks>
        </member>
        <member name="P:Zanshin.Domain.Collections.SerializablePagination`1.TotalItems">
            <summary>
              The total number of items.
            </summary>
            <value> </value>
        </member>
        <member name="P:Zanshin.Domain.Collections.SerializablePagination`1.TotalPages">
            <summary>
              The total number of pages.
            </summary>
            <value> </value>
            <remarks>
              The setter is only on this property to allow the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />
             to serialize this object. If the setter is explicitly used in consumers, then all bets are off!
            </remarks>
        </member>
        <member name="P:Zanshin.Domain.Collections.SerializablePagination`1.HasPreviousPage">
            <summary>
              Whether there are pages before the current page.
            </summary>
            <value> </value>
        </member>
        <member name="P:Zanshin.Domain.Collections.SerializablePagination`1.HasNextPage">
            <summary>
              Whether there are pages after the current page.
            </summary>
            <value> </value>
        </member>
        <member name="M:Zanshin.Domain.Collections.SerializablePagination`1.EnsurePageArray">
            <summary>
              Ensures the page array.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Collections.SerializablePagination`1.BuildPageArray">
            <summary>
              Builds the page array.
            </summary>
            <returns> </returns>
        </member>
        <member name="T:Zanshin.Domain.Common">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.DirectoryNotFound">
            <summary>
              Looks up a localized string similar to Could not locate the directory {0}.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.DisplayAttributeDisplayName">
            <summary>
              Looks up a localized string similar to public display name.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.DisplayAttributeEmailAddress">
            <summary>
              Looks up a localized string similar to email address.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.DisplayAttributeKarma">
            <summary>
              Looks up a localized string similar to karma.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.DisplayAttributePassword">
            <summary>
              Looks up a localized string similar to password.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.DisplayAttributeTagline">
            <summary>
              Looks up a localized string similar to tagline.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.DisplayAttributeTopicTitle">
            <summary>
              Looks up a localized string similar to subject.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.DisplayAttributeUserName">
            <summary>
              Looks up a localized string similar to user name.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.Email">
            <summary>
              Looks up a localized string similar to Email.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.ErrorMessagePassword">
            <summary>
              Looks up a localized string similar to please supply a password.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.ErrorMessageUserName">
            <summary>
              Looks up a localized string similar to user name is required.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.ExternalLoginConfirmationViewModel_Email_Email">
            <summary>
              Looks up a localized string similar to Email.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.ExternalLoginConfirmationViewModel_Password_Password">
            <summary>
              Looks up a localized string similar to Password.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.FailedValidation">
             <summary>
               Looks up a localized string similar to {0} failed validation.
            .
             </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.FileNotFound">
            <summary>
              Looks up a localized string similar to File {0} not found. (404).
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.GroupColor">
            <summary>
              Looks up a localized string similar to Group color.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.GroupDescription">
            <summary>
              Looks up a localized string similar to Group description.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.GroupReceivePrivateMessages">
            <summary>
              Looks up a localized string similar to Group receive private messages.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.HttpContextNull">
            <summary>
              Looks up a localized string similar to Attempted reference to HttpContext.Current which was null..
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.InvalidCode">
            <summary>
              Looks up a localized string similar to Invalid code..
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.InvalidLoginAttempt">
            <summary>
              Looks up a localized string similar to Invalid login attempt..
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.ParameterNullExceptionMessageObjectIs">
            <summary>
              Looks up a localized string similar to 
            This method is a member of {0}..
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.ParameterNullExceptionMessageOnMethod">
            <summary>
              Looks up a localized string similar to The parameter {0} on method {1}..
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.ParameterNullExceptionMethodExpectedNonNull">
            <summary>
              Looks up a localized string similar to The method expected a non-null, or non-default-value of the type {0}..
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.ParameterNullExceptionNoName">
             <summary>
               Looks up a localized string similar to  No parameter name passed, however the following parameters were available at the time the exception was thrown:
            .
             </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.ParameterNullExceptionUnableToDetermine">
            <summary>
              Looks up a localized string similar to  Unable to determine the failing parameter type, perhaps the name passed was incorrect? .
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.ParameterNullExceptionUnableToDetermineDeclaringType">
            <summary>
              Looks up a localized string similar to  Unable to determine the method&apos;s declaring type..
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.Password">
            <summary>
              Looks up a localized string similar to Password.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.RememberMe">
            <summary>
              Looks up a localized string similar to Remember me?.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.SubjectIsRequried">
            <summary>
              Looks up a localized string similar to Subject is requried..
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Common.UserWithIdNotFound">
            <summary>
              Looks up a localized string similar to User with the id {0} could not be found.
            </summary>
        </member>
        <member name="F:Zanshin.Domain.Constants.RestUrlKey">
            <summary>
            The rest URL key this is currently the only key that 
            must be present.
            </summary>
        </member>
        <member name="F:Zanshin.Domain.Constants.DefaultSlidingExpiration">
            <summary>
            The default sliding expiration
            </summary>
        </member>
        <member name="F:Zanshin.Domain.Constants.DefaultAbsoluteExpiration">
            <summary>
            The amount of time, in minutes from the moment the item is cached to expire it.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Data.Configurations.AvatarConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Configurations.AvatarConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Data.Configurations.AvatarConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Data.Configurations.CategoryConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Configurations.CategoryConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Data.Configurations.CategoryConfiguration" /> class.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Data.Configurations.ForumConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Configurations.ForumConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Data.Configurations.ForumConfiguration" /> class.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Data.Configurations.GroupConfiguration">
            <summary>
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Configurations.GroupConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Data.Configurations.GroupConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Data.Configurations.PostConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Configurations.PostConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Data.Configurations.PostConfiguration" /> class.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Data.Configurations.TagConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Configurations.TagConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Data.Configurations.TagConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Data.Configurations.TopicConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Configurations.TopicConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Data.Configurations.TopicConfiguration" /> class.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Data.Configurations.UserClaimConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Configurations.UserClaimConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Data.Configurations.UserClaimConfiguration" /> class.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Data.Configurations.UserConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Configurations.UserConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Data.Configurations.UserConfiguration" /> class.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Data.Configurations.UserGroupConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Configurations.UserGroupConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Data.Configurations.UserGroupConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Data.Configurations.UserLoginConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Configurations.UserLoginConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Data.Configurations.UserLoginConfiguration" /> class.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Data.Configurations.WebsiteConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Configurations.WebsiteConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Data.Configurations.WebsiteConfiguration"/> class.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Data.EntityContextInitializer">
            <summary>
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.EntityContextInitializer.ExtractFilename(System.String)">
            <summary>
              Extracts the filename.
            </summary>
            <param name="filepath">The filepath.</param>
            <returns></returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ArgumentException">Attempted to set to an empty string ("").</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Attempted to set a local path that cannot be found.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the appropriate permission.</exception>
        </member>
        <member name="T:Zanshin.Domain.Data.LoremIpsum">
            <summary>
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.LoremIpsum.LoremIpsumCharArray">
            <summary>
              Returns the generated text as a char array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Data.LoremIpsum.GetLoremIpsum(System.Int32)">
            <summary>
              Gets the lorem ipsum.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Data.LoremIpsum.GetLoremIpsum">
            <summary>
              Gets a default chunk of LoremIpsum that is 4545 characters long.
            </summary>
            <returns><c>string</c> of steaming lorem ipsum</returns>
        </member>
        <member name="M:Zanshin.Domain.Data.LoremIpsum.AsByteArray">
            <summary>
              Ases the byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Data.LoremIpsum.AsStream">
            <summary>
              Ases the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Zanshin.Domain.Data.Interfaces.IDataContext">
            <summary>
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Interfaces.IDataContext.TrackChanges(System.Boolean)">
            <summary>
            Tracks the changes.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="P:Zanshin.Domain.Data.Interfaces.IDataContext.Tags">
            <summary>
            Gets the tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.Interfaces.IDataContext.Forums">
            <summary>
            Gets the forums.
            </summary>
            <value>
            The forums.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.Interfaces.IDataContext.Topics">
            <summary>
            Gets the topics.
            </summary>
            <value>
            The topics.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.Interfaces.IDataContext.Posts">
            <summary>
            Gets the posts.
            </summary>
            <value>
            The posts.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.Interfaces.IDataContext.Users">
            <summary>
            Gets the users.
            </summary>
            <value>
            The users.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.Interfaces.IDataContext.Avatars">
            <summary>
            Gets the avatars.
            </summary>
            <value>
            The avatars.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.Interfaces.IDataContext.Groups">
            <summary>
            Gets the roles.
            </summary>
            <value>
            The roles.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.Interfaces.IDataContext.Categories">
            <summary>
            Gets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.Interfaces.IDataContext.GeoLocations">
            <summary>
            Gets the ip addresses.
            </summary>
            <value>
            The ip addresses.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.Interfaces.IDataContext.LocationCounts">
            <summary>
            Gets the location counts.
            </summary>
            <value>
            The location counts.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.Interfaces.IDataContext.PrivateMessages">
            <summary>
            Gets the private messages.
            </summary>
            <value>
            The private messages.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Data.Interfaces.IQueryableDataContext">
            <summary>
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.Interfaces.IQueryableDataContext.SetEntity``1">
            <summary>
            Returns a IDbSet instance for access to entities of the given type in the context,
            the ObjectStateManager, and the underlying store.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Data.Interfaces.IQueryableDataContext.Attach``1(``0)">
            <summary>
            Attaches the specified item.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="item">The item.</param>
        </member>
        <member name="M:Zanshin.Domain.Data.Interfaces.IQueryableDataContext.SetModified``1(``0)">
            <summary>
            Set object as modified
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="item">The entity item to set as modifed</param>
        </member>
        <member name="M:Zanshin.Domain.Data.Interfaces.IQueryableDataContext.Commit">
             <summary>
             Commit all changes made in a container.
             </summary>
            <remarks>
             If the entity have fixed properties and any optimistic concurrency problem exists,  
             then an exception is thrown
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Data.Interfaces.IQueryableDataContext.CommitAsync">
            <summary>
            Commits the asynchronous.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Data.Interfaces.IQueryableDataContext.ExecuteQuery``1(System.String,System.Object[])">
            <summary>
            Execute specific query with underliying persistence store
            </summary>
            <typeparam name="TEntity">Entity type to map query results</typeparam>
            <param name="sqlQuery">
            Dialect Query 
            <example>
            SELECT idCustomer,Name FROM dbo.[Customers] WHERE idCustomer > {0}
            </example>
            </param>
            <param name="parameters">A vector of parameters values</param>
            <returns>
            Enumerable results 
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Data.Interfaces.IQueryableDataContext.ExecuteCommand(System.String,System.Object[])">
            <summary>
            Execute arbitrary command into underliying persistence store
            </summary>
            <param name="sqlCommand">Command to execute
            <example>
            SELECT idCustomer,Name FROM dbo.[Customers] WHERE idCustomer &gt; {0}
            </example></param>
            <param name="parameters">A vector of parameters values</param>
            <returns>
            The number of affected records
            </returns>
        </member>
        <member name="T:Zanshin.Domain.Data.DataContext">
            <summary>
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.DataContext.#cctor">
            <summary>
            Initializes the <see cref="T:Zanshin.Domain.Data.DataContext"/> class.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.DataContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Data.DataContext" /> class.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Data.DataContext.TrackChanges(System.Boolean)">
            <summary>
            Tracks the changes.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Zanshin.Domain.Data.DataContext.SetEntity``1">
            <summary>
            Returns a IDbSet instance for access to entities of the given type in the context,
            the ObjectStateManager, and the underlying store.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Data.DataContext.Attach``1(``0)">
            <summary>
            Attaches the specified entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Zanshin.Domain.Data.DataContext.Commit">
            <summary>
            Commit all changes made in a container.
            </summary>
            <remarks>
            If the entity have fixed properties and any optimistic concurrency problem exists,
            then an exception is thrown
            </remarks>
            <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">Condition. </exception>
            <exception cref="T:System.Exception">Condition. </exception>
        </member>
        <member name="M:Zanshin.Domain.Data.DataContext.CommitAsync">
            <summary>
            Commits the asynchronous.
            </summary>
            <returns></returns>
            <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">
                        The save was aborted because validation of entity property values failed.
                        </exception>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
                        A database command did not affect the expected number of rows. This usually indicates an optimistic 
                        concurrency violation; that is, a row has been changed in the database since it was queried.
                        </exception>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">An error occurred sending updates to the database.</exception>
        </member>
        <member name="M:Zanshin.Domain.Data.DataContext.SetModified``1(``0)">
            <summary>
            Sets the modified.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="entity">The entity.</param>
            <exception cref="T:System.ArgumentNullException">entity</exception>
        </member>
        <member name="M:Zanshin.Domain.Data.DataContext.ExecuteQuery``1(System.String,System.Object[])">
            <summary>
            Execute specific query with underlying persistence store
            </summary>
            <typeparam name="TEntity">Entity type to map query results</typeparam>
            <param name="sqlQuery">Dialect Query
            <example>
            SELECT idCustomer,Name FROM dbo.[Customers] WHERE idCustomer &gt; {0}
            </example></param>
            <param name="parameters">A vector of parameters values</param>
            <returns>
            Enumerable results
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Data.DataContext.ExecuteCommand(System.String,System.Object[])">
            <summary>
            Execute arbitrary command into underlaying persistence store
            </summary>
            <param name="sqlCommand">Command to execute
            <example>
            SELECT idCustomer,Name FROM dbo.[Customers] WHERE idCustomer &gt; {0}
            </example></param>
            <param name="parameters">A vector of parameters values</param>
            <returns>
            The number of affected records
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Data.DataContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            This method is called when the model for a derived context has been initialized, but
            before the model has been locked down and used to initialize the context.  The default
            implementation of this method does nothing, but it can be overridden in a derived class
            such that the model can be further configured before it is locked down.
            </summary>
            <param name="modelBuilder">The builder that defines the model for the context being created.</param>
            <remarks>
            Typically, this method is called only once when the first instance of a derived context
            is created.  The model for that context is then cached and is for all further instances of
            the context in the app domain.  This caching can be disabled by setting the ModelCaching
            property on the given ModelBuidler, but note that this can seriously degrade performance.
            More control over caching is provided through use of the DbModelBuilder and DbContextFactory
            classes directly.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Data.DataContext.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.Logs">
            <summary>
            Gets the logs.
            </summary>
            <value>
            The logs.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.MessageReadByUsers">
            <summary>
            Gets the message read by users.
            </summary>
            <value>
            The message read by users.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.Ranks">
            <summary>
            Gets the ranks.
            </summary>
            <value>
            The ranks.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.Websites">
            <summary>
            Gets the websites.
            </summary>
            <value>
            The websites.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.GroupMessages">
            <summary>
            Gets the group messages.
            </summary>
            <value>
            The group messages.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.UserClaims">
            <summary>
            Gets the user claims.
            </summary>
            <value>
            The user claims.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.UserGroups">
            <summary>
            Gets the user groups.
            </summary>
            <value>
            The user groups.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.UserLogins">
            <summary>
            Gets the user logins.
            </summary>
            <value>
            The user logins.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.UserProfiles">
            <summary>
            Gets the user profiles.
            </summary>
            <value>
            The user profiles.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.Tags">
            <summary>
            Gets the tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.Forums">
            <summary>
            Gets the forums.
            </summary>
            <value>
            The forums.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.Topics">
            <summary>
            Gets the topics.
            </summary>
            <value>
            The topics.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.Posts">
            <summary>
            Gets the posts.
            </summary>
            <value>
            The posts.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.Users">
            <summary>
            Gets the users.
            </summary>
            <value>
            The users.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.Avatars">
            <summary>
            Gets the avatars.
            </summary>
            <value>
            The avatars.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.Groups">
            <summary>
            Gets the roles.
            </summary>
            <value>
            The roles.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.Categories">
            <summary>
            Gets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.GeoLocations">
            <summary>
            Gets the ip addresses.
            </summary>
            <value>
            The ip addresses.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.LocationCounts">
            <summary>
            Gets the location counts.
            </summary>
            <value>
            The location counts.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Data.DataContext.PrivateMessages">
            <summary>
            Gets the private messages.
            </summary>
            <value>
            The private messages.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.Avatar">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Entities.Avatar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Entities.Avatar"/> class.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.Avatar.AvatarId">
            <summary>
            Gets or sets the avatar identifier.
            </summary>
            <value>
            The avatar identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Avatar.File">
            <summary>
            Gets or sets the file.
            </summary>
            <value>
            The file.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Avatar.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Avatar.MimeType">
            <summary>
            Gets or sets the type of the MIME.
            </summary>
            <value>
            The type of the MIME.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Avatar.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>
            The date created.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Avatar.Display">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zanshin.Domain.Entities.Avatar"/> is display.
            </summary>
            <value>
              <c>true</c> if display; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Avatar.Weight">
            <summary>
            Gets or sets the weight.
            </summary>
            <value>
            The weight.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Avatar.UserCount">
            <summary>
            Gets or sets the user count.
            </summary>
            <value>
            The user count.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Avatar.Tags">
            <summary>
            Gets or sets the tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.Forum.Category">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Entities.Forum.Category.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Entities.Forum.Category"/> class.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Category.CategoryId">
            <summary>
            Gets or sets the category identifier.
            </summary>
            <value>
            The category identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Category.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Category.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>
            The date created.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Category.LastUpdated">
            <summary>
            Gets or sets the date updated.
            </summary>
            <value>
            The date updated.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Category.CategoryOrder">
            <summary>
            Gets or sets the category order.
            </summary>
            <value>
            The category order.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Category.CategoryDescription">
            <summary>
            Gets or sets the category description.
            </summary>
            <value>
            The category description.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Category.ForumCount">
            <summary>
            Gets or sets the forum count.
            </summary>
            <value>
            The forum count.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Category.RowVersion">
            <summary>
            Gets or sets the row version.
            </summary>
            <value>
            The row version.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Category.Forums">
            <summary>
            Gets or sets the forums.
            </summary>
            <value>
            The forums.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Category.Tags">
            <summary>
            Gets or sets the tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.Forum.Forum">
            <summary>
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Entities.Forum.Forum.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Entities.Forum.Forum"/> class.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.ForumId">
            <summary>
            Gets or sets the forum identifier.
            </summary>
            <value>
            The forum identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.PostCount">
            <summary>
            Gets or sets the post count.
            </summary>
            <value>
            The post count.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.TopicCount">
            <summary>
            Gets or sets the topic count.
            </summary>
            <value>
            The topic count.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.AllowHtml">
            <summary>
            Gets or sets a value indicating whether [allow HTML].
            </summary>
            <value>
              <c>true</c> if [allow HTML]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.AllowBBCode">
            <summary>
            Gets or sets a value indicating whether [allow bb code].
            </summary>
            <value>
              <c>true</c> if [allow bb code]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.AllowSigs">
            <summary>
            Gets or sets a value indicating whether [allow sigs].
            </summary>
            <value>
              <c>true</c> if [allow sigs]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.PostsPerPage">
            <summary>
            Gets or sets the posts per page.
            </summary>
            <value>
            The posts per page.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.TopicsPerPage">
            <summary>
            Gets or sets the topics per page.
            </summary>
            <value>
            The topics per page.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.HotTopicThreashold">
            <summary>
            Gets or sets the hot topic threashold.
            </summary>
            <value>
            The hot topic threashold.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.IsPrivate">
            <summary>
            Gets or sets a value indicating whether this instance is private.
            </summary>
            <value>
            <c>true</c> if this instance is private; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.RequiredRoles">
            <summary>
            Gets or sets the required roles.
            </summary>
            <value>
            The required roles.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.ForumDescription">
            <summary>
            Gets or sets the forum description.
            </summary>
            <value>
            The forum description.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.ForumPassword">
            <summary>
            Gets or sets the forum password.
            </summary>
            <value>
            The forum password.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.ForumImage">
            <summary>
            Gets or sets the forum image location, relative to 
            the root directory, of an additional image to associate
            with this forum.
            </summary>
            <value>
            The forum image.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.AllowIndexing">
            <summary>
            Gets or sets a value indicating whether [allow indexing].
            </summary>
            <value>
              <c>true</c> if [allow indexing]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.DisplayActiveTopics">
            <summary>
            Gets or sets a value indicating whether [display active topics].
            </summary>
            <value>
              <c>true</c> if [display active topics]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>
            The date created.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.RowVersion">
            <summary>
            Gets or sets the row version.
            </summary>
            <value>
            The row version.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.CategoryId">
            <summary>
            Gets or sets the category identifier.
            </summary>
            <value>
            The category identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.ForumCategory">
            <summary>
            Gets or sets the forum category.
            </summary>
            <value>
            The forum category.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.ModeratorId">
            <summary>
            Gets or sets the moderator identifier.
            </summary>
            <value>
            The moderator identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.ForumModerator">
            <summary>
            Gets or sets the forum moderator.
            </summary>
            <value>
            The forum moderator.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.ModeratorGroupId">
            <summary>
            Gets or sets the moderator group identifier.
            </summary>
            <value>
            The moderator group identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.ModeratorGroup">
            <summary>
            Gets or sets the moderator group.
            </summary>
            <value>
            The moderator group.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.Topics">
            <summary>
            Gets or sets the topics.
            </summary>
            <value>
            The topics.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.LastUpdated">
            <summary>
            Gets or sets the last updated.
            </summary>
            <value>
            The last updated.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.Tags">
            <summary>
            Gets or sets the tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Forum.PagedTopics">
            <summary>
            Gets or sets the paged topics.
            </summary>
            <value>
            The paged topics.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.Forum.Group">
            <summary>
            </summary>
            <remarks>
            IdentityRole also contains the properties
            Id, Role and Users.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Entities.Forum.Group.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Entities.Forum.Group"/> class.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Group.GroupId">
            <summary>
            Gets or sets the group identifier.
            </summary>
            <value>
            The group identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Group.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Group.FounderId">
            <summary>
            Gets or sets the founder identifier.
            </summary>
            <value>
            The founder identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Group.GroupDescription">
            <summary>
            Gets or sets the group description.
            </summary>
            <value>
            The group description.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Group.DisplayGroupInLegend">
            <summary>
            Gets or sets a value indicating whether [display group in legend].
            </summary>
            <value>
            <c>true</c> if [display group in legend]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Group.GroupRecievePrivateMessages">
            <summary>
            Gets or sets a value indicating whether [group receive private messages].
            </summary>
            <value>
            <c>true</c> if [group receive private messages]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Group.GroupColor">
            <summary>
            Gets or sets the color of the group.
            </summary>
            <value>
            The color of the group.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Group.MemberCount">
            <summary>
            Gets or sets the member count.
            </summary>
            <value>
            The member count.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Group.AdminCount">
            <summary>
            Gets or sets the admin count.
            </summary>
            <value>
            The admin count.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Group.Administrators">
            <summary>
            Gets or sets the administrators.
            </summary>
            <value>
            The administrators.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Group.Members">
            <summary>
            Gets or sets the users.
            </summary>
            <value>
            The users.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.Forum.Post">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Entities.Forum.Post.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Entities.Forum.Post"/> class.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.PostId">
            <summary>
            Gets or sets the post identifier.
            </summary>
            <value>
            The post identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.Poster">
            <summary>
            Gets or sets the poster.
            </summary>
            <value>
            The poster.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.TopicId">
            <summary>
            Gets or sets the topic identifier.
            </summary>
            <value>
            The topic identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.PostTopic">
            <summary>
            Gets or sets the post topic.
            </summary>
            <value>
            The post topic.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.ReplyToPostId">
            <summary>
            Gets or sets the reply to post identifier.
            </summary>
            <value>
            The reply to post identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.ReplyToPost">
            <summary>
            Gets or sets the reply to post.
            </summary>
            <value>
            The reply to post.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.ForumId">
            <summary>
            Gets or sets the forum identifier.
            </summary>
            <value>
            The forum identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.PostKarma">
            <summary>
            Gets or sets the post karma.
            </summary>
            <value>
            The post karma.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.Tags">
            <summary>
            Gets or sets the tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>
            The date created.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Post.LastUpdated">
            <summary>
            Gets or sets the date updated.
            </summary>
            <value>
            The date updated.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Entities.Forum.Post.CompareTo(Zanshin.Domain.Entities.Forum.Post)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.
            </returns>
        </member>
        <member name="T:Zanshin.Domain.Entities.Forum.Rank">
            <summary>
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Rank.RankId">
            <summary>
            Gets or sets the rank identifier.
            </summary>
            <value>
            The rank identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Rank.RankName">
            <summary>
            Gets or sets the name of the rank.
            </summary>
            <value>
            The name of the rank.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Rank.ImageUrl">
            <summary>
            Gets or sets the image URL.
            </summary>
            <value>
            The image URL.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Rank.RequiredPostCount">
            <summary>
            Gets or sets the required post count.
            </summary>
            <value>
            The required post count.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Rank.SpecialRank">
            <summary>
            Gets or sets a value indicating whether [special rank].
            </summary>
            <value>
              <c>true</c> if [special rank]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.Forum.Topic">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Entities.Forum.Topic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Entities.Forum.Topic"/> class.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.TopicId">
            <summary>
            Gets or sets the topic identifier.
            </summary>
            <value>
            The topic identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.CreatedDate">
            <summary>
            Gets or sets the created date.
            </summary>
            <value>
            The created date.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.LastPostDate">
            <summary>
            Gets or sets the last post date.
            </summary>
            <value>
            The last post date.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.ForumId">
            <summary>
            Gets or sets the forum identifier.
            </summary>
            <value>
            The forum identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.PostCount">
            <summary>
            Gets or sets the post count.
            </summary>
            <value>
            The post count.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.CreatedBy">
            <summary>
            Gets or sets the created by.
            </summary>
            <value>
            The created by.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.ForumName">
            <summary>
            Gets or sets the name of the forum.
            </summary>
            <value>
            The name of the forum.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.TopicStarterName">
            <summary>
            Gets or sets the name of the topic starter.
            </summary>
            <value>
            The name of the topic starter.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.TopicIcon">
            <summary>
            Gets or sets the topic icon.
            </summary>
            <value>
            The topic icon.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.Views">
            <summary>
            Gets or sets the views.
            </summary>
            <value>
            The views.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.Sticky">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zanshin.Domain.Entities.Forum.Topic"/> is sticky.
            </summary>
            <value>
              <c>true</c> if sticky; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.Locked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zanshin.Domain.Entities.Forum.Topic"/> is locked.
            </summary>
            <value>
              <c>true</c> if locked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.Moved">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zanshin.Domain.Entities.Forum.Topic"/> is moved.
            </summary>
            <value>
              <c>true</c> if moved; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.MovedToTopicId">
            <summary>
            Gets or sets the moved to topic identifier.
            </summary>
            <value>
            The moved to topic identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.RowVersion">
            <summary>
            Gets or sets the row version.
            </summary>
            <value>
            The row version.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.MovedReason">
            <summary>
            Gets or sets the moved reason.
            </summary>
            <value>
            The moved reason.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.Tags">
            <summary>
            Gets or sets the tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.Posts">
            <summary>
            Gets or sets the posts.
            </summary>
            <value>
            The posts.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Forum.Topic.PagedPosts">
            <summary>
            Gets or sets the paged posts.
            </summary>
            <value>
            The paged posts.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.GeoLocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.GeoLocationId">
            <summary>
            Gets or sets the geo location identifier.
            </summary>
            <value>
            The geo location identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.Country">
            <summary>
            Gets or sets the country.
            </summary>
            <value>
            The country.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.CountryCode">
            <summary>
            Gets or sets the country code.
            </summary>
            <value>
            The country code.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.Region">
            <summary>
            Gets or sets the region.
            </summary>
            <value>
            The region.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.RegionName">
            <summary>
            Gets or sets the name of the region.
            </summary>
            <value>
            The name of the region.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>
            The city.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.Zip">
            <summary>
            Gets or sets the zip.
            </summary>
            <value>
            The zip.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>
            The latitude.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>
            The longitude.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.TimeZone">
            <summary>
            Gets or sets the time zone.
            </summary>
            <value>
            The time zone.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.Isp">
            <summary>
            Gets or sets the isp.
            </summary>
            <value>
            The isp.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.Organization">
            <summary>
            Gets or sets the organization.
            </summary>
            <value>
            The organization.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.As">
            <summary>
            Gets or sets as.
            </summary>
            <value>
            As.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>
            The date created.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.LastSeen">
            <summary>
            Gets or sets the last seen.
            </summary>
            <value>
            The last seen.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GeoLocation.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.GroupMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Entities.GroupMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Entities.GroupMessage"/> class.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.GroupMessage.GroupMessageId">
            <summary>
            Gets or sets the group message identifier.
            </summary>
            <value>
            The group message identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GroupMessage.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>
            The image.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GroupMessage.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GroupMessage.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GroupMessage.FromUserId">
            <summary>
            Gets or sets from user identifier.
            </summary>
            <value>
            From user identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GroupMessage.FromUser">
            <summary>
            Gets or sets from user.
            </summary>
            <value>
            From user.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GroupMessage.DateSent">
            <summary>
            Gets or sets the date sent.
            </summary>
            <value>
            The date sent.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.GroupMessage.ReadBy">
            <summary>
            Gets or sets the read by.
            </summary>
            <value>
            The read by.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.Identity.UserClaim">
            <summary>
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserClaim.UserClaimId">
            <summary>
            Gets or sets the user claim identifier.
            </summary>
            <value>
            The user claim identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserClaim.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.Identity.UserRole">
            <summary>
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Entities.Identity.UserLogin">
            <summary>
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserLogin.UserLoginId">
            <summary>
            Gets or sets the user login identifier.
            </summary>
            <value>
            The user login identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserLogin.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.Identity.User">
            <summary>
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Entities.Identity.User.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Entities.Identity.User" /> class.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.PasswordLastChangedDate">
            <summary>
            Gets or sets the password last changed date.
            </summary>
            <value>
            The password last changed date.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.MaximumDaysBetweenPasswordChange">
            <summary>
            Gets or sets the maximum days between password change.
            </summary>
            <value>
            The maximum days between password change.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.PostCount">
            <summary>
            Gets or sets the post count.
            </summary>
            <value>
            The post count.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.TopicCount">
            <summary>
            Gets or sets the topic count.
            </summary>
            <value>
            The topic count.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.Tagline">
            <summary>
            Gets or sets the tagline.
            </summary>
            <value>
            The tagline.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.LastSearch">
            <summary>
            Gets or sets the last search.
            </summary>
            <value>
            The last search.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.RankId">
            <summary>
            Gets or sets the rank identifier.
            </summary>
            <value>
            The rank identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.Rank">
            <summary>
            Gets or sets the rank.
            </summary>
            <value>
            The rank.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.JoinedDate">
            <summary>
            Gets or sets the joined date.
            </summary>
            <value>
            The joined date.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.LastLogin">
            <summary>
            Gets or sets the last login.
            </summary>
            <value>
            The last login.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.Karma">
            <summary>
            Gets or sets the karma.
            </summary>
            <value>
            The karma.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.UserIcon">
            <summary>
            Gets or sets the user icon.
            </summary>
            <value>
            The user icon.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.AvatarId">
            <summary>
            Gets or sets the avatar identifier.
            </summary>
            <value>
            The avatar identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.Active">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Zanshin.Domain.Entities.Identity.User"/> is active.
            </summary>
            <value>
              <c>true</c> if active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.RowVersion">
            <summary>
            Gets or sets the row version.
            </summary>
            <value>
            The row version.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.Notes">
            <summary>
            Gets or sets the notes.
            </summary>
            <value>
            The notes.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.UserProfileId">
            <summary>
            Gets or sets the user profile identifier.
            </summary>
            <value>
            The user profile identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.Profile">
            <summary>
            Gets or sets the profile.
            </summary>
            <value>
            The profile.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.Groups">
            <summary>
            Gets or sets the roles.
            </summary>
            <value>
            The roles.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.Messages">
            <summary>
            Gets or sets the messages.
            </summary>
            <value>
            The messages.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.User.Tags">
            <summary>
            Gets or sets the tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Entities.Identity.User.GenerateUserIdentityAsync(Zanshin.Domain.Providers.Interfaces.IApplicationUserManager)">
            <summary>
            Generates the user identity asynchronous.
            </summary>
            <param name="manager">The manager.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Entities.Identity.User.GenerateUserIdentityAsync(Microsoft.AspNet.Identity.UserManager{Zanshin.Domain.Entities.Identity.User,System.Int32},System.String)">
            <summary>
            Generates the user identity asynchronous.
            </summary>
            <param name="manager">The manager.</param>
            <param name="authenticationType">Type of the authentication.</param>
            <returns></returns>
        </member>
        <member name="T:Zanshin.Domain.Entities.Identity.UserProfile">
            <summary>
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserProfile.UserProfileId">
            <summary>
            Gets or sets the user profile identifier.
            </summary>
            <value>
            The user profile identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserProfile.BirthDay">
            <summary>
            Gets or sets the birth day.
            </summary>
            <value>
            The birth day.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserProfile.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserProfile.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>
            The latitude.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserProfile.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>
            The longitude.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserProfile.Sig">
            <summary>
            Gets or sets the sig.
            </summary>
            <value>
            The sig.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserProfile.AllowHtmlSig">
            <summary>
            Gets or sets a value indicating whether [allow HTML sig].
            </summary>
            <value>
              <c>true</c> if [allow HTML sig]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserProfile.FacebookPage">
            <summary>
            Gets or sets the facebook page.
            </summary>
            <value>
            The facebook page.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserProfile.SkypeUserName">
            <summary>
            Gets or sets the name of the skype user.
            </summary>
            <value>
            The name of the skype user.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserProfile.TwitterName">
            <summary>
            Gets or sets the name of the twitter.
            </summary>
            <value>
            The name of the twitter.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Identity.UserProfile.HomePage">
            <summary>
            Gets or sets the home page.
            </summary>
            <value>
            The home page.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.LocationCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.LocationCount.LocationCountId">
            <summary>
            Gets or sets the location count id.
            </summary>
            <value>
            The location count id.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.LocationCount.GeoLocationId">
            <summary>
            Gets or sets the geo location id.
            </summary>
            <value>
            The geo location id.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.LocationCount.GeoLocation">
            <summary>
            Gets or sets the geo location.
            </summary>
            <value>
            The geo location.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.LocationCount.HitCount">
            <summary>
            Gets or sets the hit count.
            </summary>
            <value>
            The hit count.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.MessageReadByUser">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.MessageReadByUser.GroupMessageId">
            <summary>
            Gets or sets the group message identifier.
            </summary>
            <value>
            The group message identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.MessageReadByUser.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.MessageReadByUser.UserId">
            <summary>
            Gets or sets the user identifier.
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.MessageReadByUser.User">
            <summary>
            Gets or sets the user.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.PrivateMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.PrivateMessage.PrivateMessageId">
            <summary>
            Gets or sets the private message identifier.
            </summary>
            <value>
            The private message identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.PrivateMessage.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>
            The image.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.PrivateMessage.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.PrivateMessage.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.PrivateMessage.FromUserId">
            <summary>
            Gets or sets from user identifier.
            </summary>
            <value>
            From user identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.PrivateMessage.FromUser">
            <summary>
            Gets or sets from user.
            </summary>
            <value>
            From user.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.PrivateMessage.ToUserId">
            <summary>
            Gets or sets to user identifier.
            </summary>
            <value>
            To user identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.PrivateMessage.ToUser">
            <summary>
            Gets or sets to user.
            </summary>
            <value>
            To user.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.PrivateMessage.DateSent">
            <summary>
            Gets or sets the date sent.
            </summary>
            <value>
            The date sent.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.PrivateMessage.DateSeen">
            <summary>
            Gets or sets the date seen.
            </summary>
            <value>
            The date seen.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.Tag">
            <summary>
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.Tag.TagId">
            <summary>
            Gets or sets the tag identifier.
            </summary>
            <value>
            The tag identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Tag.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Tag.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>
            The date created.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Tag.Posts">
            <summary>
            Gets or sets the posts.
            </summary>
            <value>
            The posts.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Tag.Forums">
            <summary>
            Gets or sets the forums.
            </summary>
            <value>
            The forums.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Tag.Topics">
            <summary>
            Gets or sets the topics.
            </summary>
            <value>
            The topics.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Tag.Categories">
            <summary>
            Gets or sets the categories.
            </summary>
            <value>
            The categories.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Tag.Users">
            <summary>
            Gets or sets the users.
            </summary>
            <value>
            The users.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Tag.Websites">
            <summary>
            Gets or sets the websites.
            </summary>
            <value>
            The websites.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Tag.Avatars">
            <summary>
            Gets or sets the avatars.
            </summary>
            <value>
            The avatars.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Entities.Website">
            <summary>
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Entities.Website.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Entities.Website"/> class.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Entities.Website.WebsiteId">
            <summary>
            Gets or sets the website identifier.
            </summary>
            <value>
            The website identifier.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Website.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Entities.Website.Tags">
            <summary>
            Gets or sets the tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Exceptions.ParameterNullException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Exceptions.ParameterNullException" /> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="P:Zanshin.Domain.Exceptions.ParameterNullException.Message">
            <summary>
            Gets the error message and the parameter name, or only the error message if no parameter name is set.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Exceptions.ParameterNullException.DeclaringType">
            <summary>
            Gets the type of the declaring.
            </summary>
            <value>
            The type of the declaring.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Exceptions.ParameterNullException.FailingParamterType">
            <summary>
            Gets the type of the failing paramter.
            </summary>
            <value>
            The type of the failing paramter.
            </value>
            <remarks>This can be null!</remarks>
        </member>
        <member name="P:Zanshin.Domain.Exceptions.ParameterNullException.ParameterName">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>
            The name of the parameter.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Exceptions.ParameterNullException.DeclaringMethod">
            <summary>
            Gets the declaring method.
            </summary>
            <value>
            The declaring method.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Extensions.EnumerableExtensions.On``1(System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
            Ons the specified f.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="f">The f.</param>
            <param name="g">The g.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.EnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
              Iterates through the specified enumerable object.
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="enumerable"> The enumerable. </param>
            <param name="function"> The function. </param>
        </member>
        <member name="M:Zanshin.Domain.Extensions.EnumerableExtensions.Map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
              Apply a given function to each element of a collection, returning a new collection with the items altered by function.
            </summary>
            <typeparam name="T"> </typeparam>
            <typeparam name="TR"> The type of the new enumerable. </typeparam>
            <param name="enumerable"> The enumerable. </param>
            <param name="function"> The function. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.ConvertYorNToBool(System.String)">
            <summary>
              Converts a "Y" or "N" string to its boolean value.
            </summary>
            <param name="s"> The s. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.CapitalizeFirstLetterOfEachWord(System.String)">
            <summary>
              Capitalizes the first letter of each word in a string that are separated by spaces or a string that is a single word.
            </summary>
            <param name="fixedString"> The string value </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.UppercaseFirst(System.String)">
            <summary>
            Uppercases the first.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.EndsWith(System.String,System.String[],System.Boolean,System.Globalization.CultureInfo)">
            <summary>
              Determines whether a string ends with any of the variables in a given string array.
            </summary>
            <param name="s"> The s. </param>
            <param name="stringsToCheck"> The strings to check. </param>
            <param name="caseSensitive"> if set to <c>true</c> [case sensitive]. </param>
            <param name="cultureInfo"> The culture info. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.EnsureDotAfter(System.String)">
            <summary>
              Ensures the dot after.
            </summary>
            <param name="s"> The s. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.EnsureDotBefore(System.String)">
            <summary>
              Ensures the dot before.
            </summary>
            <param name="s"> The s. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.EnsureSlashesAfter(System.String)">
            <summary>
              Ensures the slashes after.
            </summary>
            <param name="s"> The s. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.EnsureSlashesBefore(System.String)">
            <summary>
              Ensures the slashes before.
            </summary>
            <param name="s"> The s. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.FindPath(System.String,System.Boolean)">
            <summary>
              Finds the config path.
            </summary>
            <param name="fileName"> The name of the file.(i.e. notes.txt, index.html etc.) </param>
            <param name="prependPath"> if set to <c>true</c> [prepend path]. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.FindPath(System.String)">
            <summary>
              Finds the full file path.
            </summary>
            <param name="fileName"> The name of the file.(i.e. notes.txt, index.html etc.) </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.FromBase64(System.String)">
            <summary>
              Converts a base 64 string to its 8bit ASCII equivalent
            </summary>
            <param name="messageToConvert"> The Base 64 string to convert. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.IsValidEmailAddress(System.String)">
            <summary>
              Determines whether [is valid email address] [the specified string to check].
            </summary>
            <param name="stringToCheck"> The s. </param>
            <returns> <c>true</c> if the specified string to check is a valid email address, otherwise <c>false</c> . </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.Md5Hash(System.String)">
            <summary>
              Returns an MD5 hash of the given string.
            </summary>
            <param name="s"> The s. </param>
            <returns> </returns>
            <remarks>
              New code should NOT use this method, it is for backwards compatibility only! MD5 is no longer considered a secure hashing algorithm
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.Md5Hash(System.Text.StringBuilder)">
            <summary>
              Converts the contents of a StringBuilder to an MD5 Hash and returns the string value.
            </summary>
            <param name="sb"> The StringBuilder. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.Replace(System.String,System.String[],System.String)">
            <summary>
              Replaces the specified s.
            </summary>
            <param name="s"> The s. </param>
            <param name="remove"> The remove. </param>
            <param name="replacement"> The replacement. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.Sha256Hash(System.String)">
            <summary>
              Creates a one way hash for string passed using the SHA256 hashing algorithm.
            </summary>
            <param name="s"> The string to hash. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.StartsWith(System.String,System.String[],System.Boolean,System.Globalization.CultureInfo)">
            <summary>
              Determines whether a string starts with any of the variables in a given string array.
            </summary>
            <param name="s"> The s. </param>
            <param name="stringsToCheck"> The strings to check. </param>
            <param name="caseSensitive"> if set to <c>true</c> [case sensitive]. </param>
            <param name="cultureInfo"> The culture info. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.ToBase64(System.String)">
            <summary>
              Converts a string to base 64
            </summary>
            <param name="messageToEncode"> The encode. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.UrlDecode(System.String)">
            <summary>
              URLs the decode.
            </summary>
            <param name="decode"> The decode. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.UrlEncode(System.String)">
            <summary>
              Encodes the given string.
            </summary>
            <param name="encode"> The encode. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.IncludeScript(System.String)">
            <summary>
            Creates a html script tag setting the src to the absolute path given the virtual path.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">virtualPath</exception>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.IncludeLinkStyle(System.String)">
            <summary>
            Creates a html link style tag setting the href to the absolute path given the virtual path.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">virtualPath</exception>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.SetAbsolutePath(System.String)">
            <summary>
            Sets the absolute path.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">virtualPath</exception>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.ToVirtualPath(System.String)">
            <summary>
            To the virtual path.
            </summary>
            <param name="physicalPath">The physical path.</param>
            <returns></returns>
            <exception cref="T:System.ApplicationException">Cannot convert string to relative without a valid HttpContext.</exception>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.Rule.#ctor(System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Zanshin.Domain.Extensions.StringExtensions.Rule" /> class.
            </summary>
            <param name="pattern"> The pattern. </param>
            <param name="replacement"> The replacement. </param>
        </member>
        <member name="M:Zanshin.Domain.Extensions.StringExtensions.Rule.Apply(System.String)">
            <summary>
              Applies the specified word.
            </summary>
            <param name="word"> The word. </param>
            <returns> </returns>
        </member>
        <member name="T:Zanshin.Domain.Extensions.TimedLock">
            <summary>
            Class provides a nice way of obtaining a lock that will time out with a cleaner syntax than using the whole Monitor.TryEnter() method.
            </summary>
            <remarks>
            Adapted from Ian Griffiths article http://www.interact-sw.co.uk/iangblog/2004/03/23/locking and incorporating suggestions
             by Marek Malowidzki as outlined in this blog post http://www.interact-sw.co.uk/iangblog/2004/05/12/timedlockstacktrace
            </remarks>
            <example>
            Instead of: <code>lock(obj)
            {
            //Thread safe operation
            }
            do this:
            using(TimedLock.Lock(obj))
            {
            //Thread safe operations
            }
            or this:
            try
            {
            TimedLock timeLock = TimedLock.Lock(obj);
            //Thread safe operations
            timeLock.Dispose();
            }
            catch(LockTimeoutException e)
            {
            Console.WriteLine("Couldn't get a lock!");
            StackTrace otherStack = e.GetBlockingThreadStackTrace(5000);
            if(otherStack == null)
            {
            Console.WriteLine("Couldn't get other stack!");
            }
            else
            {
            Console.WriteLine("Stack trace of thread that owns lock!");
            }
            }</code></example>
        </member>
        <member name="M:Zanshin.Domain.Extensions.TimedLock.Lock(System.Object)">
            <summary>
            Attempts to obtain a lock on the specified object for up to 10 seconds.
            </summary>
            <param name="syncRoot">The synchronize root.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">syncRoot</exception>
            <exception cref="T:Zanshin.Domain.Extensions.LockTimeoutException">Condition.</exception>
            <exception cref="T:System.OverflowException"><paramref>
              <name>value</name>
            </paramref>
            is less than <see cref="F:System.TimeSpan.MinValue" />
            or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref><name>value</name></paramref>
            is <see cref="F:System.Double.PositiveInfinity" />.
            -or-<paramref><name>value</name></paramref>
            is <see cref="F:System.Double.NegativeInfinity" />.</exception>
            <exception cref="T:System.ArgumentNullException">The value of 'o' cannot be null.</exception>
        </member>
        <member name="M:Zanshin.Domain.Extensions.TimedLock.Lock(System.Object,System.TimeSpan)">
            <summary>
            Attempts to obtain a lock on the specified object for up to the specified timeout.
            </summary>
            <param name="syncRoot">The synchronize root.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">syncRoot</exception>
            <exception cref="T:Zanshin.Domain.Extensions.LockTimeoutException"></exception>
            <exception cref="T:Zanshin.Domain.Extensions.LockTimeoutException">Condition.</exception>
            <exception cref="T:System.ArgumentNullException">The value of 'syncRoot' cannot be null.</exception>
        </member>
        <member name="M:Zanshin.Domain.Extensions.TimedLock.Dispose">
            <summary>
            Disposes of this lock.
            </summary>
            <exception cref="T:System.Threading.SynchronizationLockException">The current thread does not own the lock for the specified object.</exception>
        </member>
        <member name="M:Zanshin.Domain.Extensions.UndisposedLockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Extensions.UndisposedLockException"/> class.
            </summary>
            <param name="undisposedLock">The undisposed lock.</param>
        </member>
        <member name="M:Zanshin.Domain.Extensions.LockTimeoutException.ReportStackTraceIfError(System.Object)">
            <summary>
            Reports the stack trace if error.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Zanshin.Domain.Extensions.TypeExtensions.IsSubClassOfGeneric(System.Type,System.Type)">
            <summary>
            Determines whether [is sub class of generic] [the specified child].
            </summary>
            <param name="child">The child.</param>
            <param name="parent">The parent.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.TypeExtensions.GetFullTypeDefinition(System.Type)">
            <summary>
            Gets the full type definition.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Extensions.TypeExtensions.VerifyGenericArguments(System.Type,System.Type)">
            <summary>
            Verifies the generic arguments.
            </summary>
            <param name="parent">The parent.</param>
            <param name="child">The child.</param>
            <returns></returns>
        </member>
        <member name="T:Zanshin.Domain.Factories.ApiControllerFactory">
            <summary>
            Used to resolve the ApiController for WebApi
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Factories.ApiControllerFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Factories.ApiControllerFactory"/> class.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Factories.ApiControllerFactory.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
            <summary>
            Creates an <see cref="T:System.Web.Http.Controllers.IHttpController" /> object.
            </summary>
            <param name="request">The message request.</param>
            <param name="controllerDescriptor">The HTTP controller descriptor.</param>
            <param name="controllerType">The type of the controller.</param>
            <returns>
            An <see cref="T:System.Web.Http.Controllers.IHttpController" /> object.
            </returns>
            <remarks>Not checking the controllerDescriptor as we don't care about its state.</remarks>
            <exception cref="T:System.ArgumentNullException">The value of 'request' cannot be null. </exception>
            <exception cref="T:Castle.MicroKernel.ComponentNotFoundException">key</exception>
        </member>
        <member name="M:Zanshin.Domain.Factories.ApiControllerFactory.Release.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Factories.ApiControllerFactory.Release"/> class.
            </summary>
            <param name="release">The release.</param>
        </member>
        <member name="M:Zanshin.Domain.Factories.ApiControllerFactory.Release.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Zanshin.Domain.Factories.ApiHttpClientFactory.Create(System.String)">
            <summary>
            Creates the specified URL.
            </summary>
            <param name="restBaseUrl">The URL.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">restBaseUrl</exception>
        </member>
        <member name="M:Zanshin.Domain.Factories.ApiHttpClientFactory.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Factories.CacheItemPropertiesFactory.#ctor(Zanshin.Domain.Helpers.Interfaces.IConfigurationWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Factories.CacheItemPropertiesFactory" /> class.
            </summary>
            <param name="config">The configuration.</param>
        </member>
        <member name="M:Zanshin.Domain.Factories.CacheItemPropertiesFactory.Build">
            <summary>
            Builds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Factories.CacheItemPropertiesFactory.Build(System.Int32,System.Int32,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheDependency,System.Delegate)">
            <summary>
            Builds the specified sliding expiration.
            </summary>
            <param name="slidingExpiration">The sliding expiration.</param>
            <param name="absoluteExpiration">The absolute expiration.</param>
            <param name="cacheItemPriority">The cache item priority.</param>
            <param name="dependency">The dependency.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="P:Zanshin.Domain.Factories.CacheItemPropertiesFactory.Default">
            <summary>
            Gets the default cacheItemProperties object.
            This will be created with the values passed in via the
            environment service or with a sliding of 1 and absolute of 10.
            </summary>
            <value>
            The default.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Factories.ControllerFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Factories.ControllerFactory.ReleaseController(System.Web.Mvc.IController)">
            <summary>
              Releases the controller.
            </summary>
            <param name="controller"> The controller. </param>
        </member>
        <member name="M:Zanshin.Domain.Factories.ControllerFactory.GetControllerInstance(System.Web.Routing.RequestContext,System.Type)">
            <summary>
            tries to get the controller instance from the Windsor container. If the container does not have a type requested,
             it will throw a <see cref="T:Castle.MicroKernel.ComponentNotFoundException" /> . We catch these and add the controller
            type to the container. BUYER BEWARE: Any controller that needs to maintain state for a given
            request MUST define the controller in the Castle.config and set the lifestyle to transient.
            While you will likely see your controller work fine on your dev machine, if you don't define it in the config,
            Castle will create it as a singleton! So in Meridian speak this would be like having a singleton presenter.
            Why is that bad? Imagine a singleton <c>AccountController</c> being shared by 2 connections... smh
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="controllerType">The type of the controller.</param>
            <returns>
            A reference to the controller.
            </returns>
            <exception cref="T:System.Web.HttpException"><c>HttpException</c>
            .</exception>
            <exception cref="T:System.ArgumentNullException">The value of 'controllerType' cannot be null. </exception>
            <exception cref="T:System.ApplicationException">Controller type should be resolved by API . </exception>
            <exception cref="T:Castle.MicroKernel.ComponentNotFoundException">key</exception>
        </member>
        <member name="M:Zanshin.Domain.Factories.Interfaces.ICacheItemPropertiesFactory.Build">
            <summary>
            Builds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Factories.Interfaces.ICacheItemPropertiesFactory.Build(System.Int32,System.Int32,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheDependency,System.Delegate)">
            <summary>
            Builds the specified sliding expiration.
            </summary>
            <param name="slidingExpiration">The sliding expiration.</param>
            <param name="absoluteExpiration">The absolute expiration.</param>
            <param name="cacheItemPriority">The cache item priority.</param>
            <param name="dependency">The dependency.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="P:Zanshin.Domain.Factories.Interfaces.ICacheItemPropertiesFactory.Default">
            <summary>
            Gets the default cacheItemProperties object.
            This will be created with the values passed in via the
            environment service or with a sliding of 1 and absolute of 10.
            </summary>
            <value>
            The default.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Factories.Interfaces.IApiHttpClientFactory.Create(System.String)">
            <summary>
            Creates the specified URL.
            </summary>
            <param name="restBaseUrl">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Factories.Interfaces.IApiHttpClientFactory.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Factories.PageArrayBuilder`1.#ctor(Zanshin.Domain.Collections.CustomPagination{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:Zanshin.Domain.Factories.PageArrayBuilder`1" /> class.
            </summary>
            <param name="basePagination"> The base pagination. </param>
        </member>
        <member name="M:Zanshin.Domain.Factories.PageArrayBuilder`1.Create(Zanshin.Domain.Collections.CustomPagination{`0})">
            <summary>
            Creates the specified custom pagination.
            </summary>
            <param name="basePagination">The base pagination.</param>
            <returns></returns>
        </member>
        <member name="P:Zanshin.Domain.Factories.PageArrayBuilder`1.BoundSize">
            <summary>
              Gets the size of the bound.
            </summary>
            <value> The size of the bound. </value>
        </member>
        <member name="P:Zanshin.Domain.Factories.PageArrayBuilder`1.InLowerBounds">
            <summary>
              Gets a value indicating whether [in lower bounds].
            </summary>
            <value> <c>true</c> if [in lower bounds]; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:Zanshin.Domain.Factories.PageArrayBuilder`1.InUpperBounds">
            <summary>
              Gets a value indicating whether [in upper bounds].
            </summary>
            <value> <c>true</c> if [in upper bounds]; otherwise, <c>false</c> . </value>
        </member>
        <member name="M:Zanshin.Domain.Factories.PageArrayBuilder`1.BuildPageArray">
            <summary>
              Builds the page array.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Factories.PageArrayBuilderForSerializablePagination`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Zanshin.Domain.Factories.PageArrayBuilder`1" /> class.
            </summary>
            <param name="totalPages"> The total pages. </param>
            <param name="pageArraySize"> The page link count. </param>
            <param name="pageNumber"> The current page. </param>
        </member>
        <member name="M:Zanshin.Domain.Factories.PageArrayBuilderForSerializablePagination`1.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
              Creates the specified custom pagination.
            </summary>
            <param name="totalPages"> The total pages. </param>
            <param name="pageArraySize"> The page link count. </param>
            <param name="pageNumber"> The current page. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Factories.PageArrayBuilderForSerializablePagination`1.PageSizeChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Pages the size changed.
            </summary>
            <param name="pageSize">Size of the page.</param>
            <param name="totalPages">The total pages.</param>
            <param name="pageArraySize">Size of the page array.</param>
            <param name="currentPage">The current page.</param>
        </member>
        <member name="P:Zanshin.Domain.Factories.PageArrayBuilderForSerializablePagination`1.ErrorMessages">
            <summary>
              Gets the error messages.
            </summary>
            <value> The error messages. </value>
        </member>
        <member name="P:Zanshin.Domain.Factories.PageArrayBuilderForSerializablePagination`1.BoundSize">
            <summary>
              Gets the size of the bound.
            </summary>
            <value> The size of the bound. </value>
        </member>
        <member name="P:Zanshin.Domain.Factories.PageArrayBuilderForSerializablePagination`1.InLowerBounds">
            <summary>
              Gets a value indicating whether [in lower bounds].
            </summary>
            <value> <c>true</c> if [in lower bounds]; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:Zanshin.Domain.Factories.PageArrayBuilderForSerializablePagination`1.InUpperBounds">
            <summary>
              Gets a value indicating whether [in upper bounds].
            </summary>
            <value> <c>true</c> if [in upper bounds]; otherwise, <c>false</c> . </value>
        </member>
        <member name="M:Zanshin.Domain.Factories.PageArrayBuilderForSerializablePagination`1.BuildPageArray">
            <summary>
              Builds the page array.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Factories.PageArrayBuilderForSerializablePagination`1.BuildLowerBounds">
            <summary>
            Builds the lower bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Factories.PageArrayBuilderForSerializablePagination`1.BuildUpperBounds">
            <summary>
            Builds the upper bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Filters.CacheItemProperties.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Zanshin.Domain.Filters.CacheItemProperties" /> class.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Filters.CacheItemProperties.Dependency">
            <summary>
              Gets or sets the dependency.
            </summary>
            <value> The dependency. </value>
        </member>
        <member name="P:Zanshin.Domain.Filters.CacheItemProperties.AbsoluteExpiration">
            <summary>
              Gets or sets the absolute expiration.
            </summary>
            <value> The absolute expiration. </value>
        </member>
        <member name="P:Zanshin.Domain.Filters.CacheItemProperties.SlidingExpiration">
            <summary>
              Gets or sets the sliding expiration.
            </summary>
            <value> The sliding expiration. </value>
        </member>
        <member name="P:Zanshin.Domain.Filters.CacheItemProperties.CachePriority">
            <summary>
              Gets or sets the cache priority.
            </summary>
            <value> The cache priority. </value>
        </member>
        <member name="P:Zanshin.Domain.Filters.CacheItemProperties.Callback">
            <summary>
              Gets or sets the callback.
            </summary>
            <value> The callback. </value>
        </member>
        <member name="P:Zanshin.Domain.Filters.Interfaces.ICacheItemProperties.Dependency">
            <summary>
              Gets or sets the dependency.
            </summary>
            <value> The dependency. </value>
        </member>
        <member name="P:Zanshin.Domain.Filters.Interfaces.ICacheItemProperties.AbsoluteExpiration">
            <summary>
              Gets or sets the absolute expiration.
            </summary>
            <value> The absolute expiration. </value>
        </member>
        <member name="P:Zanshin.Domain.Filters.Interfaces.ICacheItemProperties.SlidingExpiration">
            <summary>
              Gets or sets the sliding expiration.
            </summary>
            <value> The sliding expiration. </value>
        </member>
        <member name="P:Zanshin.Domain.Filters.Interfaces.ICacheItemProperties.CachePriority">
            <summary>
              Gets or sets the cache priority.
            </summary>
            <value> The cache priority. </value>
        </member>
        <member name="P:Zanshin.Domain.Filters.Interfaces.ICacheItemProperties.Callback">
            <summary>
              Gets or sets the callback.
            </summary>
            <value> The callback. </value>
        </member>
        <member name="T:Zanshin.Domain.Filters.ResourceFilter">
            <summary>
            Resource filter can be used api repositories to send key value pairs to 
            a WebApi, or any html provider.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Filters.ResourceFilter.Create(System.String)">
            <summary>
            Creates the filter with an assumed key value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Filters.ResourceFilter.Create(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Creates the specified key value pairs.
            </summary>
            <param name="keyValuePairs">The key value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Filters.ResourceFilter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Zanshin.Domain.Helpers.ConfigurationWrapper">
            <summary>
            Allows testing of classes that make use of AppSettings and ConnectionStrings 
            Sections of app.config and web.config files.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Helpers.DataMaker">
            <summary>
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Helpers.DataMaker.EnglishAverages.WordMin">
            <summary>
            Gets the word minimum.
            </summary>
            <value>
            The word minimum.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Helpers.DataMaker.EnglishAverages.WordMax">
            <summary>
            Gets the word maximum.
            </summary>
            <value>
            The word maximum.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Helpers.DataMaker.EnglishAverages.SentenceMin">
            <summary>
            Gets the sentence minimum.
            </summary>
            <value>
            The sentence minimum.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Helpers.DataMaker.EnglishAverages.SentenceMax">
            <summary>
            Gets the sentence maximum.
            </summary>
            <value>
            The sentence maximum.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Helpers.DataMaker.GetChar">
            <summary>
            Gets the char.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Zanshin.Domain.Helpers.DataMaker.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:Zanshin.Domain.Helpers.DataMaker.GetString(System.Int32)">
            <summary>
            Gets the string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.DataMaker.ResetProperties``1(``0@)">
            <summary>
            Resets the properties.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="one">The one.</param>
        </member>
        <member name="M:Zanshin.Domain.Helpers.DataMaker.DeepCopy``1(``0)">
            <summary>
            Creates a deep copy of &lt;T&gt; essentially ensuring the 
            item is in a separate memory space on the heap.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.DataMaker.CreateAndFill``1">
            <summary>
            Creates the and fill.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.DataMaker.CreateAndFill(System.Type,System.Int32)">
            <summary>
            Creates the and fill.
            </summary>
            <param name="t">The t.</param>
            <param name="currentDepth">The current depth.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.DataMaker.CreateComplexObject(System.Reflection.PropertyInfo,System.Object@,System.Int32)">
            <summary>
            Creates the complex object.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <param name="entity">The entity.</param>
            <param name="currentDepth">The current depth.</param>
            <exception cref="T:System.NotImplementedException">no default constructor</exception>
        </member>
        <member name="M:Zanshin.Domain.Helpers.ValueTypeFactory.Create(System.Type)">
            <summary>
            Creates the specified t.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Helpers.ValueTypeFactory.GetInteger">
            <summary>
            Gets the integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.ValueTypeFactory.GetLong">
            <summary>
            Gets the long.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.ValueTypeFactory.GetDouble">
            <summary>
            Gets the double.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.ValueTypeFactory.GetDecimal">
            <summary>
            Gets the decimal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.ValueTypeFactory.GetFloat">
            <summary>
            Gets the float.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.ValueTypeFactory.GetShort">
            <summary>
            Gets the short.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.ValueTypeFactory.GetUint">
            <summary>
            Gets the uint.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.ValueTypeFactory.GetUshort">
            <summary>
            Gets the ushort.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.ValueTypeFactory.GetUlong">
            <summary>
            Gets the ulong.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.ValueTypeFactory.GetByte">
            <summary>
            Gets the byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Helpers.ValueTypeFactory.GetSbyte">
            <summary>
            Gets the sbyte.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Zanshin.Domain.Helpers.FakeForumData">
            <summary>
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Helpers.FakeForumData.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Helpers.FakeForumData"/> class.
            </summary>
            <param name="forumCount">The forum count.</param>
        </member>
        <member name="P:Zanshin.Domain.Helpers.FakeForumData.Forums">
            <summary>
            Gets the forums.
            </summary>
            <value>
            The forums.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Helpers.FakeForumData.Topics">
            <summary>
            Gets the topics.
            </summary>
            <value>
            The topics.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Helpers.FakeForumData.Users">
            <summary>
            Gets the users.
            </summary>
            <value>
            The users.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Helpers.FakeForumData.Posts">
            <summary>
            Gets the posts.
            </summary>
            <value>
            The posts.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Models.Account.LoginViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Models.Account.LoginViewModel.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>
            The email.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Models.Account.LoginViewModel.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Models.Account.LoginViewModel.RememberMe">
            <summary>
            Gets or sets a value indicating whether [remember me].
            </summary>
            <value>
              <c>true</c> if [remember me]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Providers.ApplicationOAuthProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Providers.ApplicationOAuthProvider"/> class.
            </summary>
            <param name="publicClientId">The public client identifier.</param>
            <exception cref="T:System.ArgumentNullException">publicClientId</exception>
            <exception cref="T:System.ArgumentNullException">The value of 'publicClientId' cannot be null.</exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.ApplicationOAuthProvider.GrantResourceOwnerCredentials(Microsoft.Owin.Security.OAuth.OAuthGrantResourceOwnerCredentialsContext)">
            <summary>
            Called when a request to the Token endpoint arrives with a "grant_type" of "password". This occurs when the user has provided name and password
            credentials directly into the client application's user interface, and the client application is using those to acquire an "access_token" and
            optional "refresh_token". If the web application supports the
            resource owner credentials grant type it must validate the context.Username and context.Password as appropriate. To issue an
            access token the context.Validated must be called with a new ticket containing the claims about the resource owner which should be associated
            with the access token. The application should take appropriate measures to ensure that the endpoint isn’t abused by malicious callers.
            The default behavior is to reject this grant type.
            See also http://tools.ietf.org/html/rfc6749#section-4.3.2
            </summary>
            <param name="context">The context of the event carries information in and results out.</param>
            <returns>
            Task to enable asynchronous execution
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.ApplicationOAuthProvider.TokenEndpoint(Microsoft.Owin.Security.OAuth.OAuthTokenEndpointContext)">
            <summary>
            Called at the final stage of a successful Token endpoint request. An application may implement this call in order to do any final
            modification of the claims being used to issue access or refresh tokens. This call may also be used in order to add additional
            response parameters to the Token endpoint's json response body.
            </summary>
            <param name="context">The context of the event carries information in and results out.</param>
            <returns>
            Task to enable asynchronous execution
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.ApplicationOAuthProvider.ValidateClientAuthentication(Microsoft.Owin.Security.OAuth.OAuthValidateClientAuthenticationContext)">
            <summary>
            Called to validate that the origin of the request is a registered "client_id", and that the correct credentials for that client are
            present on the request. If the web application accepts Basic authentication credentials,
            context.TryGetBasicCredentials(out clientId, out clientSecret) may be called to acquire those values if present in the request header. If the web
            application accepts "client_id" and "client_secret" as form encoded POST parameters,
            context.TryGetFormCredentials(out clientId, out clientSecret) may be called to acquire those values if present in the request body.
            If context.Validated is not called the request will not proceed further.
            </summary>
            <param name="context">The context of the event carries information in and results out.</param>
            <returns>
            Task to enable asynchronous execution
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.ApplicationOAuthProvider.ValidateClientRedirectUri(Microsoft.Owin.Security.OAuth.OAuthValidateClientRedirectUriContext)">
            <summary>
            Called to validate that the context.ClientId is a registered "client_id", and that the context.RedirectUri a "redirect_uri"
            registered for that client. This only occurs when processing the Authorize endpoint. The application MUST implement this
            call, and it MUST validate both of those factors before calling context.Validated. If the context.Validated method is called
            with a given redirectUri parameter, then IsValidated will only become true if the incoming redirect URI matches the given redirect URI.
            If context.Validated is not called the request will not proceed further.
            </summary>
            <param name="context">The context of the event carries information in and results out.</param>
            <returns>
            Task to enable asynchronous execution
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.ApplicationOAuthProvider.CreateProperties(System.String)">
            <summary>
            Creates the properties.
            </summary>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="T:Zanshin.Domain.Providers.EntityStore`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Zanshin.Domain.Providers.EntityStore`1.#ctor(Zanshin.Domain.Data.Interfaces.IDataContext)">
            <summary>
            Constructor that takes a Context
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Zanshin.Domain.Providers.EntityStore`1.Context">
            <summary>
            Context for the store
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Providers.EntityStore`1.EntitySet">
            <summary>
            Used to query the entities
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Providers.EntityStore`1.DbEntitySet">
            <summary>
            EntitySet for this store
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Providers.EntityStore`1.GetByIdAsync(System.Object)">
            <summary>
            FindAsync an entity by ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.EntityStore`1.Create(`0)">
            <summary>
            Insert an entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Zanshin.Domain.Providers.EntityStore`1.Delete(`0)">
            <summary>
            Mark an entity for deletion
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Zanshin.Domain.Providers.EntityStore`1.Update(`0)">
            <summary>
            Update an entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager">
            <summary>
            TODO why did I suddenly have to override this to get it to work?
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager"/> class.</summary>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.GetAuthenticationTypes">
            <summary>
            Lists all of the description data provided by authentication middleware that have been chained
            </summary>
            <returns>
            The authentication descriptions
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.GetAuthenticationTypes(System.Func{Microsoft.Owin.Security.AuthenticationDescription,System.Boolean})">
            <summary>
            Lists the description data of all of the authentication middleware which are true for a given predicate
            </summary>
            <param name="predicate">A function provided by the caller which returns true for descriptions that should be in the returned list</param>
            <returns>
            The authentication descriptions
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.AuthenticateAsync(System.String)">
            <summary>
            Call back through the middleware to ask for a specific form of authentication to be performed
                        on the current request
            </summary>
            <param name="authenticationType">Identifies which middleware should respond to the request
                        for authentication. This value is compared to the middleware's Options.AuthenticationType property.</param>
            <returns>
            Returns an object with the results of the authentication. The AuthenticationResult.Identity
                        may be null if authentication failed. Even if the Identity property is null, there may still be 
                        AuthenticationResult.properties and AuthenticationResult.Description information returned.
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.AuthenticateAsync(System.String[])">
            <summary>
            Called to perform any number of authentication mechanisms on the current request.
            </summary>
            <param name="authenticationTypes">Identifies one or more middleware which should attempt to respond</param>
            <returns>
            Returns the AuthenticationResult information from the middleware which responded. The 
                        order is determined by the order the middleware are in the pipeline. Latest added is first in the list.
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.Challenge(Microsoft.Owin.Security.AuthenticationProperties,System.String[])">
            <summary>
            Add information into the response environment that will cause the authentication middleware to challenge
                        the caller to authenticate. This also changes the status code of the response to 401. The nature of that 
                        challenge varies greatly, and ranges from adding a response header or changing the 401 status code to 
                        a 302 redirect.
            </summary>
            <param name="properties">Additional arbitrary values which may be used by particular authentication types.</param><param name="authenticationTypes">Identify which middleware should perform their alterations on the
                        response. If the authenticationTypes is null or empty, that means the 
                        AuthenticationMode.Active middleware should perform their alterations on the response.</param>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.Challenge(System.String[])">
            <summary>
            Add information into the response environment that will cause the authentication middleware to challenge
                        the caller to authenticate. This also changes the status code of the response to 401. The nature of that 
                        challenge varies greatly, and ranges from adding a response header or changing the 401 status code to 
                        a 302 redirect.
            </summary>
            <param name="authenticationTypes">Identify which middleware should perform their alterations on the
                        response. If the authenticationTypes is null or empty, that means the 
                        AuthenticationMode.Active middleware should perform their alterations on the response.</param>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.SignIn(Microsoft.Owin.Security.AuthenticationProperties,System.Security.Claims.ClaimsIdentity[])">
            <summary>
            Add information to the response environment that will cause the appropriate authentication middleware
                        to grant a claims-based identity to the recipient of the response. The exact mechanism of this may vary.
                        Examples include setting a cookie, to adding a fragment on the redirect url, or producing an OAuth2
                        access code or token response.
            </summary>
            <param name="properties">Contains additional properties the middleware are expected to persist along with
                        the claims. These values will be returned as the AuthenticateResult.properties collection when AuthenticateAsync
                        is called on subsequent requests.</param><param name="identities">Determines which claims are granted to the signed in user. The 
                        ClaimsIdentity.AuthenticationType property is compared to the middleware's Options.AuthenticationType 
                        value to determine which claims are granted by which middleware. The recommended use is to have a single
                        ClaimsIdentity which has the AuthenticationType matching a specific middleware.</param>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.SignIn(System.Security.Claims.ClaimsIdentity[])">
            <summary>
            Add information to the response environment that will cause the appropriate authentication middleware
                        to grant a claims-based identity to the recipient of the response. The exact mechanism of this may vary.
                        Examples include setting a cookie, to adding a fragment on the redirect url, or producing an OAuth2
                        access code or token response.
            </summary>
            <param name="identities">Determines which claims are granted to the signed in user. The 
                        ClaimsIdentity.AuthenticationType property is compared to the middleware's Options.AuthenticationType 
                        value to determine which claims are granted by which middleware. The recommended use is to have a single
                        ClaimsIdentity which has the AuthenticationType matching a specific middleware.</param>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.SignOut(Microsoft.Owin.Security.AuthenticationProperties,System.String[])">
            <summary>
            Add information to the response environment that will cause the appropriate authentication middleware
                        to revoke any claims identity associated the the caller. The exact method varies.
            </summary>
            <param name="properties">Additional arbitrary values which may be used by particular authentication types.</param><param name="authenticationTypes">Identifies which middleware should perform the work to sign out.
                        Multiple authentication types may be provided to clear out more than one cookie at a time, or to clear
                        cookies and redirect to an external single-sign out url.</param>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.SignOut(System.String[])">
            <summary>
            Add information to the response environment that will cause the appropriate authentication middleware
                        to revoke any claims identity associated the the caller. The exact method varies.
            </summary>
            <param name="authenticationTypes">Identifies which middleware should perform the work to sign out.
                        Multiple authentication types may be provided to clear out more than one cookie at a time, or to clear
                        cookies and redirect to an external single-sign out url.</param>
        </member>
        <member name="P:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.User">
            <summary>
            Returns the current user for the request
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.AuthenticationResponseChallenge">
            <summary>
            Exposes the security.Challenge environment value as a strong type.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.AuthenticationResponseGrant">
            <summary>
            Exposes the security.SignIn environment value as a strong type.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Providers.Identity.ApplicationAuthenticationManager.AuthenticationResponseRevoke">
            <summary>
            Exposes the security.SignOut environment value as a strong type.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Providers.Identity.ApplicationClaimsIdentityFactory">
            <summary>
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationClaimsIdentityFactory.CreateAsync(Microsoft.AspNet.Identity.UserManager{Zanshin.Domain.Entities.Identity.User,System.Int32},Zanshin.Domain.Entities.Identity.User,System.String)">
            <summary>
            Creates the asynchronous.
            </summary>
            <param name="manager">The manager.</param>
            <param name="user">The user.</param>
            <param name="authenticationType">Type of the authentication.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            manager
            or
            user
            </exception>
        </member>
        <member name="T:Zanshin.Domain.Providers.Identity.ApplicationSignInManager">
            <summary>
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationSignInManager.#ctor(Zanshin.Domain.Providers.Interfaces.IApplicationUserManager,Microsoft.Owin.Security.IAuthenticationManager,Zanshin.Domain.Repositories.Interfaces.IEntityRepository{Zanshin.Domain.Entities.Identity.User,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Providers.Identity.ApplicationSignInManager" /> class.
            </summary>
            <param name="userManager">The user manager.</param>
            <param name="authenticationManager">The authentication manager.</param>
            <param name="userRepository">The user repository.</param>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationSignInManager.CreateUserIdentityAsync(Zanshin.Domain.Entities.Identity.User)">
            <summary>
            Creates the user identity asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
            <exception cref="T:System.ArgumentNullException">The value of 'user' cannot be null.</exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationSignInManager.PasswordSignInAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Passwords the sign in asynchronous.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="isPersistent">if set to <c>true</c> [is persistent].</param>
            <param name="shouldLockout">if set to <c>true</c> [should lockout].</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationSignInManager.SignInAsync(Zanshin.Domain.Entities.Identity.User,System.Boolean,System.Boolean)">
            <summary>
            Signs the in asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="isPersistent">if set to <c>true</c> [is persistent].</param>
            <param name="rememberBrowser">if set to <c>true</c> [remember browser].</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationSignInManager.Create(Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{Zanshin.Domain.Providers.Identity.ApplicationSignInManager},Microsoft.Owin.IOwinContext)">
            <summary>
            Creates the specified options.
            </summary>
            <param name="options">
            The options.
            </param>
            <param name="context">
            The context.
            </param>
            <returns>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The value of 'options' cannot be null. 
            </exception>
        </member>
        <member name="T:Zanshin.Domain.Providers.Identity.ApplicationUserManager">
            <summary>
            Configure the application user manager used in this application. UserManager is defined in ASP.NET Identity and is used by the application.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationUserManager.#ctor(Microsoft.AspNet.Identity.IUserStore{Zanshin.Domain.Entities.Identity.User,System.Int32},Microsoft.AspNet.Identity.IClaimsIdentityFactory{Zanshin.Domain.Entities.Identity.User,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Providers.Identity.ApplicationUserManager" /> class.
            </summary>
            <param name="userStore">The store.</param>
            <param name="claimsIdentityFactory">The claims identity factory.</param>
        </member>
        <member name="M:Zanshin.Domain.Providers.Identity.ApplicationUserManager.Create(Microsoft.AspNet.Identity.Owin.IdentityFactoryOptions{Zanshin.Domain.Providers.Identity.ApplicationUserManager},Microsoft.Owin.IOwinContext)">
            <summary>
            Creates the specified options.
            </summary>
            <param name="options">The options.</param>
            <param name="context">The context.</param>
            <returns></returns>
            <exception cref="T:System.OverflowException"><paramref>
                    <name>value</name>
                </paramref>
                is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref>
                    <name>value</name>
                </paramref>
                is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref>
                    <name>value</name>
                </paramref>
                is <see cref="F:System.Double.NegativeInfinity" />.</exception>
        </member>
        <member name="P:Zanshin.Domain.Providers.IEntityStore`1.Context">
            <summary>
            Context for the store
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Providers.IEntityStore`1.EntitySet">
            <summary>
            Used to query the entities
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Providers.IEntityStore`1.DbEntitySet">
            <summary>
            EntitySet for this store
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Providers.IEntityStore`1.GetByIdAsync(System.Object)">
            <summary>
            FindAsync an entity by ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.IEntityStore`1.Create(`0)">
            <summary>
            Insert an entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Zanshin.Domain.Providers.IEntityStore`1.Delete(`0)">
            <summary>
            Mark an entity for deletion
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Zanshin.Domain.Providers.IEntityStore`1.Update(`0)">
            <summary>
            Update an entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager">
            <summary>
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.CreateUserIdentityAsync(Zanshin.Domain.Entities.Identity.User)">
            <summary>
            Creates the user identity asynchronous.
            </summary>
            <param name="user">
            The user.
            </param>
            <returns>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The value of 'user' cannot be null. 
            </exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.ConvertIdToString(System.Int32)">
            <summary>
            Converts the identifier to string.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.ConvertIdFromString(System.String)">
            <summary>
            Converts the identifier from string.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.SignInAsync(Zanshin.Domain.Entities.Identity.User,System.Boolean,System.Boolean)">
            <summary>
            Signs the in asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="isPersistent">if set to <c>true</c> [is persistent].</param>
            <param name="rememberBrowser">if set to <c>true</c> [remember browser].</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.SendTwoFactorCodeAsync(System.String)">
            <summary>
            Sends the two factor code asynchronous.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.GetVerifiedUserIdAsync">
            <summary>
            Gets the verified user identifier asynchronous.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.HasBeenVerifiedAsync">
            <summary>
            Determines whether [has been verified asynchronous].
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.TwoFactorSignInAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Twoes the factor sign in asynchronous.
            </summary>
            <param name="provider">The provider.</param>
            <param name="code">The code.</param>
            <param name="isPersistent">if set to <c>true</c> [is persistent].</param>
            <param name="rememberBrowser">if set to <c>true</c> [remember browser].</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.ExternalSignInAsync(Microsoft.AspNet.Identity.Owin.ExternalLoginInfo,System.Boolean)">
            <summary>
            Externals the sign in asynchronous.
            </summary>
            <param name="loginInfo">The login information.</param>
            <param name="isPersistent">if set to <c>true</c> [is persistent].</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.PasswordSignInAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Passwords the sign in asynchronous.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="isPersistent">if set to <c>true</c> [is persistent].</param>
            <param name="shouldLockout">if set to <c>true</c> [should lockout].</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.AuthenticationType">
            <summary>
            Gets or sets the type of the authentication.
            </summary>
            <value>
            The type of the authentication.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.UserManager">
            <summary>
            Gets or sets the user manager.
            </summary>
            <value>
            The user manager.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Providers.Interfaces.IApplicationSignInManager.AuthenticationManager">
            <summary>
            Gets or sets the authentication manager.
            </summary>
            <value>
            The authentication manager.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2">
            <summary>
             </summary>
            <typeparam name="TUser">The type of the user.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.CreateAsync(`0)">
            <summary>
            Creates the asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.UpdateAsync(`0)">
            <summary>
            Updates the asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.DeleteAsync(`0)">
            <summary>
            Deletes the asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.FindByIdAsync(`1)">
            <summary>
            Finds the by identifier asynchronous.
            </summary>
            <param name="userId">The user identifier.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.FindByNameAsync(System.String)">
            <summary>
            Finds the by name asynchronous.
            </summary>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.AddLoginAsync(`0,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Adds the login asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="login">The login.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.RemoveLoginAsync(`0,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Removes the login asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="login">The login.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.GetLoginsAsync(`0)">
            <summary>
            Gets the logins asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.FindAsync(Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Finds the asynchronous.
            </summary>
            <param name="login">The login.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">login</exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.GetClaimsAsync(`0)">
            <summary>
            Gets the claims asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.AddClaimAsync(`0,System.Security.Claims.Claim)">
            <summary>
            Adds the claim asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="claim">The claim.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.RemoveClaimAsync(`0,System.Security.Claims.Claim)">
            <summary>
            Removes the claim asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="claim">The claim.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.AddToRoleAsync(`0,System.String)">
            <summary>
            Adds to role asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="roleName">Name of the role.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.RemoveFromRoleAsync(`0,System.String)">
            <summary>
            Removes from role asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="roleName">Name of the role.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.GetRolesAsync(`0)">
            <summary>
            Gets the roles asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.IsInRoleAsync(`0,System.String)">
            <summary>
            Determines whether [is in role asynchronous] [the specified user].
            </summary>
            <param name="user">The user.</param>
            <param name="roleName">Name of the role.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.SetPasswordHashAsync(`0,System.String)">
            <summary>
            Sets the password hash asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="passwordHash">The password hash.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.GetPasswordHashAsync(`0)">
            <summary>
            Gets the password hash asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.HasPasswordAsync(`0)">
            <summary>
            Determines whether [has password asynchronous] [the specified user].
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.SetSecurityStampAsync(`0,System.String)">
            <summary>
            Sets the security stamp asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="stamp">The stamp.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.ArgumentNullException">The value of 'user' cannot be null. </exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.GetSecurityStampAsync(`0)">
            <summary>
            Gets the security stamp asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.ArgumentNullException">The value of 'user' cannot be null. </exception>
        </member>
        <member name="P:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.Users">
            <summary>
            Gets the users.
            </summary>
            <value>
            The users.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.Context">
            <summary>
            Context for the store
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.AutoSaveChanges">
            <summary>
            If true will call SaveChanges after Create/Update/Delete
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.SetEmailAsync(`0,System.String)">
            <summary>
            Sets the email asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="email">The email.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.ArgumentNullException">The value of 'user' cannot be null. </exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.GetEmailAsync(`0)">
            <summary>
            Gets the email asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.GetEmailConfirmedAsync(`0)">
            <summary>
            Gets the email confirmed asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.SetEmailConfirmedAsync(`0,System.Boolean)">
            <summary>
            Sets the email confirmed asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="confirmed">if set to <c>true</c> [confirmed].</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.FindByEmailAsync(System.String)">
            <summary>
            Finds the by email asynchronous.
            </summary>
            <param name="email">The email.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.SetPhoneNumberAsync(`0,System.String)">
            <summary>
            Sets the phone number asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="phoneNumber">The phone number.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.GetPhoneNumberAsync(`0)">
            <summary>
            Gets the phone number asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.GetPhoneNumberConfirmedAsync(`0)">
            <summary>
            Gets the phone number confirmed asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.SetPhoneNumberConfirmedAsync(`0,System.Boolean)">
            <summary>
            Sets the phone number confirmed asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="confirmed">if set to <c>true</c> [confirmed].</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.SetTwoFactorEnabledAsync(`0,System.Boolean)">
            <summary>
            Sets the two factor enabled asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.GetTwoFactorEnabledAsync(`0)">
            <summary>
            Gets the two factor enabled asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.GetLockoutEndDateAsync(`0)">
            <summary>
            Gets the lockout end date asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.SetLockoutEndDateAsync(`0,System.DateTimeOffset)">
            <summary>
            Sets the lockout end date asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="lockoutEnd">The lockout end.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.IncrementAccessFailedCountAsync(`0)">
            <summary>
            Increments the access failed count asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.ResetAccessFailedCountAsync(`0)">
            <summary>
            Resets the access failed count asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.GetAccessFailedCountAsync(`0)">
            <summary>
            Gets the access failed count asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.GetLockoutEnabledAsync(`0)">
            <summary>
            Gets the lockout enabled asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.Interfaces.IUserStoreProvider`2.SetLockoutEnabledAsync(`0,System.Boolean)">
            <summary>
            Sets the lockout enabled asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Zanshin.Domain.Providers.UserStoreProvider`2">
            <summary>
            </summary>
            <typeparam name="TUser">The type of the user.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.#ctor(Zanshin.Domain.Repositories.Interfaces.IEntityRepository{Zanshin.Domain.Entities.Identity.User,System.Int32},Zanshin.Domain.Repositories.Interfaces.IEntityRepository{Zanshin.Domain.Entities.Identity.UserClaim,System.Int32},Zanshin.Domain.Repositories.Interfaces.IEntityRepository{Zanshin.Domain.Entities.Identity.UserLogin,System.Int32})">
            <summary>
            Initializes a new instance of the <see><cref>UserStoreProvider</cref></see>
            class.
            </summary>
            <param name="userRepository">The user store.</param>
            <param name="userClaimRepository">The user claim repository.</param>
            <param name="userLoginRepository">The user login repository.</param>
        </member>
        <member name="P:Zanshin.Domain.Providers.UserStoreProvider`2.Users">
            <summary>
            Gets the users.
            </summary>
            <value>
            The users.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.GetClaimsAsync(`0)">
            <summary>
            Gets the claims asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.AddClaimAsync(`0,System.Security.Claims.Claim)">
            <summary>
            Adds the claim asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="claim">The claim.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.RemoveClaimAsync(`0,System.Security.Claims.Claim)">
            <summary>
            Removes the claim asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="claim">The claim.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.SetEmailAsync(`0,System.String)">
            <summary>
            Sets the email asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="email">The email.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">user</exception>
            <exception cref="T:System.ArgumentNullException">The value of 'user' cannot be null.</exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.GetEmailAsync(`0)">
            <summary>
            Gets the email asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.GetEmailConfirmedAsync(`0)">
            <summary>
            Gets the email confirmed asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.SetEmailConfirmedAsync(`0,System.Boolean)">
            <summary>
            Sets the email confirmed asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="confirmed">if set to <c>true</c> [confirmed].</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.FindByEmailAsync(System.String)">
            <summary>
            Finds the by email asynchronous.
            </summary>
            <param name="email">The email.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.GetLockoutEndDateAsync(`0)">
            <summary>
            Gets the lockout end date asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.SetLockoutEndDateAsync(`0,System.DateTimeOffset)">
            <summary>
            Sets the lockout end date asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="lockoutEnd">The lockout end.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.IncrementAccessFailedCountAsync(`0)">
            <summary>
            Increments the access failed count asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.ResetAccessFailedCountAsync(`0)">
            <summary>
            Resets the access failed count asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.GetAccessFailedCountAsync(`0)">
            <summary>
            Gets the access failed count asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.GetLockoutEnabledAsync(`0)">
            <summary>
            Gets the lockout enabled asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.SetLockoutEnabledAsync(`0,System.Boolean)">
            <summary>
            Sets the lockout enabled asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.CreateAsync(`0)">
            <summary>
            Creates the asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.UpdateAsync(`0)">
            <summary>
            Updates the asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.DeleteAsync(`0)">
            <summary>
            Deletes the asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.FindByIdAsync(`1)">
            <summary>
            Finds the by identifier asynchronous.
            </summary>
            <param name="userId">The user identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
              <name>s</name>
              is null. </exception>
            <exception cref="T:System.FormatException">
              <name>s</name>
              is not in the correct format. </exception>
            <exception cref="T:System.OverflowException">
              <name>s</name>
              represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.FindByNameAsync(System.String)">
            <summary>
            Finds the by name asynchronous.
            </summary>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.AddLoginAsync(`0,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Adds the login asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="login">The login.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.RemoveLoginAsync(`0,Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Removes the login asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="login">The login.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.GetLoginsAsync(`0)">
            <summary>
            Gets the logins asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.FindAsync(Microsoft.AspNet.Identity.UserLoginInfo)">
            <summary>
            Finds the asynchronous.
            </summary>
            <param name="login">The login.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.SetPasswordHashAsync(`0,System.String)">
            <summary>
            Sets the password hash asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="passwordHash">The password hash.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.GetPasswordHashAsync(`0)">
            <summary>
            Gets the password hash asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.HasPasswordAsync(`0)">
            <summary>
            Determines whether [has password asynchronous] [the specified user].
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.SetPhoneNumberAsync(`0,System.String)">
            <summary>
            Sets the phone number asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="phoneNumber">The phone number.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.GetPhoneNumberAsync(`0)">
            <summary>
            Gets the phone number asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.GetPhoneNumberConfirmedAsync(`0)">
            <summary>
            Gets the phone number confirmed asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.SetPhoneNumberConfirmedAsync(`0,System.Boolean)">
            <summary>
            Sets the phone number confirmed asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="confirmed">if set to <c>true</c> [confirmed].</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.AddToRoleAsync(`0,System.String)">
            <summary>
            Adds to role asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="roleName">Name of the role.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.RemoveFromRoleAsync(`0,System.String)">
            <summary>
            Removes from role asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="roleName">Name of the role.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.GetRolesAsync(`0)">
            <summary>
            Gets the roles asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.IsInRoleAsync(`0,System.String)">
            <summary>
            Determines whether [is in role asynchronous] [the specified user].
            </summary>
            <param name="user">The user.</param>
            <param name="roleName">Name of the role.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.SetSecurityStampAsync(`0,System.String)">
            <summary>
            Sets the security stamp asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="stamp">The stamp.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.GetSecurityStampAsync(`0)">
            <summary>
            Gets the security stamp asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="P:Zanshin.Domain.Providers.UserStoreProvider`2.Context">
            <summary>
            Context for the store
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Providers.UserStoreProvider`2.DisposeContext">
            <summary>
            If true will call dispose on the DbContext during Dispose
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Providers.UserStoreProvider`2.AutoSaveChanges">
            <summary>
            If true will call SaveChanges after Create/Update/Delete
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.SetTwoFactorEnabledAsync(`0,System.Boolean)">
            <summary>
            Sets the two factor enabled asynchronous.
            </summary>
            <param name="user">The user.</param>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.GetTwoFactorEnabledAsync(`0)">
            <summary>
            Gets the two factor enabled asynchronous.
            </summary>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Providers.UserStoreProvider`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.#ctor(Zanshin.Domain.Factories.Interfaces.IApiHttpClientFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Repositories.ApiRepository`1"/> class.
            </summary>
            <param name="apiHttpClientFactory">The API HTTP client factory.</param>
            <remarks>
            This sets the request timeout to 10 seconds by default. For long
            Timeout duration set the property.
            </remarks>
            <exception cref="T:System.OverflowException">
              is less than <see cref="F:System.TimeSpan.MinValue" />
             or greater than <see cref="F:System.TimeSpan.MaxValue" />.-or-
              <name>value</name>
              is <see cref="F:System.Double.PositiveInfinity" />
            .-or- is <see cref="F:System.Double.NegativeInfinity" />. </exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.Delete(System.String)">
            <summary>
            Deletes the specified resource.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The value of 'id' cannot be null. </exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.DeleteAsync(System.String)">
            <summary>
            Deletes the asynchronous.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The value of 'id' cannot be null. </exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.Get(Zanshin.Domain.Filters.ResourceFilter)">
            <summary>
            Gets the resource specified by the applied filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.GetAsync(Zanshin.Domain.Filters.ResourceFilter)">
            <summary>
            Gets the resource specified by the applied filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The value of 'filter' cannot be null. </exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.Get(System.String)">
            <summary>
            Gets a resource. If id is specified then gets the resource
            with the specified Id.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.GetAsync(System.String)">
            <summary>
            Gets a resource asynchronously. If id is specified then gets the resource
            with the specified Id asynchronously.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Instance of T if successful, otherwise 
            default(T) which can be null.</returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.Get">
            <summary>
            Gets a resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.GetAsync">
            <summary>
            Gets a resource asynchronously. If id is specified then gets the resource
            with the specified Id asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.Get(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Gets a resource with the applied filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.GetAsync(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Gets a resource with the applied filter asynchronously. If id is specified then gets the resource
            with the specified Id asynchronously.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">filter</exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.Post(`0)">
            <summary>
             Creates the resource.
            </summary>
            <param name="resource"> The resource. </param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.PostAsync(`0)">
            <summary>
            Asynchronously creates the resource.
            </summary>
            <param name="resource">The resource.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.Put(System.String,`0)">
            <summary>
              Updates the specified resource.
            </summary>
            <param name="resource"> The resource. </param>
            <param name="id"> </param>
            <remarks>The id field can be null.</remarks>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.PutAsync(System.String,`0)">
            <summary>
            Updates the resource asynchronously.
            </summary>
            <param name="resource">The resource.</param>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="P:Zanshin.Domain.Repositories.ApiRepository`1.Timeout">
            <summary>
            Gets or sets the timeout value.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Repositories.ApiRepository`1.HttpClient">
            <summary>
            Gets the HTTP client.
            </summary>
            <value>
            The HTTP client.
            </value>
            <remarks>This property is not added onto the interface
            so as not to encourage direct use of the client.</remarks>
        </member>
        <member name="M:Zanshin.Domain.Repositories.ApiRepository`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Repositories.EntityRepository`2">
            <summary>
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TK">The type of the k.</typeparam>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.#ctor(Zanshin.Domain.Data.Interfaces.IDataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Repositories.EntityRepository`2" /> class.
            </summary>
            <param name="dataContext">The data context.</param>
        </member>
        <member name="P:Zanshin.Domain.Repositories.EntityRepository`2.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.String)">
            <summary>
            Generic method to get a collection of Entities
            </summary>
            <param name="filter">Filter expression for the return Entities</param>
            <param name="orderBy">Represents the order of the return Entities</param>
            <param name="includeProperties">Include Properties for the navigation properties</param>
            <returns>A Enumerable of Entities</returns>
            <exception cref="T:System.Exception">A delegate callback throws an exception. </exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.String)">
            <summary>
            Gets the asynchronous.
            </summary>
            <param name="filter">The filter.</param>
            <param name="orderBy">The order by.</param>
            <param name="includeProperties">The include properties.</param>
            <returns></returns>
            <exception cref="T:System.Exception">A delegate callback throws an exception. </exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.GetById(`1)">
            <summary>
            Generic Method to get an Entity by Identity
            </summary>
            <param name="id">The Identity of the Entity</param>
            <returns>
            The Entity
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.GetByIdAsync(`1,System.String)">
            <summary>
            Gets the by identifier asynchronous.
            </summary>
            <param name="id">The identifier.</param>
            <param name="includeProperties">The include properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            Finds the specified match.
            </summary>
            <param name="filter">The filter.</param>
            <param name="includeProperties">The include properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.Insert(`0)">
            <summary>
            Generic method for add an Entity to the context
            </summary>
            <param name="entity">The Entity to Add</param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.InsertAsync(`0)">
            <summary>
            Inserts the asynchronous.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.Delete(`1)">
            <summary>
            Generic method for deleting a method in the context by identity
            </summary>
            <param name="id">The Identity of the Entity</param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.Delete(`0)">
            <summary>
            Generic method for deleting a method in the context pasing the Entity
            </summary>
            <param name="entityToDelete">Entity to Delete</param>
            <exception cref="T:System.ArgumentNullException">The value of 'entityToDelete' cannot be null. </exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.DeleteAsync(`0)">
            <summary>
            Deletes the asynchronous.
            </summary>
            <param name="entityToDelete">The entity to delete.</param>
            <returns></returns>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">An error occurred sending updates to the database.</exception>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
                        A database command did not affect the expected number of rows. This usually indicates an optimistic 
                        concurrency violation; that is, a row has been changed in the database since it was queried.
                        </exception>
            <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">
                        The save was aborted because validation of entity property values failed.
                        </exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.Update(`0,`1)">
            <summary>
            Updates the specified updated.
            </summary>
            <param name="updated">The updated.</param>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">An error occurred sending updates to the database.</exception>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
                        A database command did not affect the expected number of rows. This usually indicates an optimistic 
                        concurrency violation; that is, a row has been changed in the database since it was queried.
                        </exception>
            <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">
                        The save was aborted because validation of entity property values failed.
                        </exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.UpdateAsync(`0,`1)">
            <summary>
            Updates the asynchronous.
            </summary>
            <param name="updated">The updated.</param>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
                        A database command did not affect the expected number of rows. This usually indicates an optimistic 
                        concurrency violation; that is, a row has been changed in the database since it was queried.
                        </exception>
            <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">
                        The save was aborted because validation of entity property values failed.
                        </exception>
            <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">An error occurred sending updates to the database.</exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.GetPagedElements``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Generic implementation for get Paged Entities
            </summary>
            <typeparam name="TKey">Key for order Expression</typeparam>
            <param name="pageIndex">Index of the Page</param>
            <param name="pageCount">Number of Entities to get</param>
            <param name="orderByExpression">Order expression</param>
            <param name="orderby">if set to <c>true</c> [orderby].</param>
            <returns>
            Enumerable of Entities matching the conditions
            </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.GetPagedElements``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.String)">
            <summary>
            Generic implementation for get Paged Entities
            </summary>
            <typeparam name="TKey">Key for order Expression</typeparam>
            <param name="pageIndex">Index of the Page</param>
            <param name="pageCount">Number of Entities to get</param>
            <param name="orderByExpression">Order expression</param>
            <param name="ascending">If the order is ascending or descending</param>
            <param name="includeProperties">Includes</param>
            <returns>
            Enumerable of Entities matching the conditions
            </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.GetFromDatabaseWithQuery(System.String,System.Object[])">
            <summary>
            Execute query
            </summary>
            <param name="sqlQuery">The Query to be executed</param>
            <param name="parameters">The parameters</param>
            <returns>
            List of Entity
            </returns>
            <exception cref="T:System.ArgumentNullException">The value of 'sqlQuery' cannot be null. </exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.ExecuteInDatabaseByQuery(System.String,System.Object[])">
            <summary>
            Execute a command in database
            </summary>
            <param name="sqlCommand">The sql query</param>
            <param name="parameters">The parameters</param>
            <returns>integer representing the sql code</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'parameters' cannot be null. </exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.EntityRepository`2.GetCount">
            <summary>
            Get count of Entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.GeoLocationRepository.#ctor(Zanshin.Domain.Data.Interfaces.IDataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Repositories.GeoLocationRepository" /> class.
            </summary>
            <param name="dataContext">The data context.</param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.GeoLocationRepository.Update(Zanshin.Domain.Entities.GeoLocation)">
            <summary>
            Generic method for updating an Entity in the context
            </summary>
            <param name="entityToUpdate">The story to Update</param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.GeoLocationRepository.AddIfNotExists(Zanshin.Domain.Entities.GeoLocation)">
            <summary>
            Adds if not exists.
            </summary>
            <param name="geoLocation">The geo location.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">geoLocation</exception>
        </member>
        <member name="T:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.Delete(System.String)">
            <summary>
            Deletes the specified resource.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.DeleteAsync(System.String)">
            <summary>
            Deletes the asynchronous.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.Get(Zanshin.Domain.Filters.ResourceFilter)">
            <summary>
            Gets the resource specified by the applied filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.GetAsync(Zanshin.Domain.Filters.ResourceFilter)">
            <summary>
            Gets the resource specified by the applied filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.Get(System.String)">
            <summary>
            Gets a resource. If id is specified then gets the resource
            with the specified Id.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.GetAsync(System.String)">
            <summary>
            Gets a resource asynchronously. If id is specified then gets the resource
            with the specified Id asynchronously.
            </summary>
            <param name="id">The identifier.</param>
            <returns>Instance of T if successful, otherwise 
            default(T) which can be null.</returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.Get">
            <summary>
            Gets a resource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.GetAsync">
            <summary>
            Gets a resource asynchronously. If id is specified then gets the resource
            with the specified Id asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.Get(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Gets a resource with the applied filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">filter</exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.GetAsync(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Gets a resource with the applied filter asynchronously. If id is specified then gets the resource
            with the specified Id asynchronously.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">filter</exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.Post(`0)">
            <summary>
             Creates the resource.
            </summary>
            <param name="resource"> The resource. </param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.PostAsync(`0)">
            <summary>
            Asynchronously creates the resource.
            </summary>
            <param name="resource">The resource.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.Put(System.String,`0)">
            <summary>
              Updates the specified resource.
            </summary>
            <param name="resource"> The resource. </param>
            <param name="id"> </param>
            <remarks>The id field can be null.</remarks>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.PutAsync(System.String,`0)">
            <summary>
            Updates the resource asynchronously.
            </summary>
            <param name="resource">The resource.</param>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="P:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.Timeout">
            <summary>
            Gets or sets the timeout value.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.HttpClient">
            <summary>
            Gets the HTTP client.
            </summary>
            <value>
            The HTTP client.
            </value>
            <remarks>This property is not added onto the interface
            so as not to encourage direct use of the client.</remarks>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IApiRepository`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.Delete(System.String)">
            <summary>
            Deletes the specified resource.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">id</exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.DeleteAsync(System.String)">
            <summary>
            Deletes the asynchronous.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">id</exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.Get(Zanshin.Domain.Filters.ResourceFilter)">
            <summary>
            Gets the resource specified by the applied filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">filter</exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.GetAsync(Zanshin.Domain.Filters.ResourceFilter)">
            <summary>
            Gets the resource specified by the applied filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">filter</exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.Get(System.String)">
            <summary>
            Gets the specified identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">id</exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.GetAsync(System.String)">
            <summary>
            Gets the resource specified by the applied filter.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.Get">
            <summary>
            Gets the resource specified by the applied filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.GetAsync">
            <summary>
            Gets the resource specified by the applied filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.Get(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Gets the resource specified by the applied filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">filter</exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.GetAsync(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Gets the resource specified by the applied filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">filter</exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.Post(`0)">
            <summary>
            Creates the resource.
            </summary>
            <param name="resource">The resource.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">resource</exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.PostAsync(`0)">
            <summary>
            Asynchronously creates the resource.
            </summary>
            <param name="resource">The resource.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">resource</exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.Put(System.String,`0)">
            <summary>
            Updates the specified resource.
            </summary>
            <param name="id"></param>
            <param name="resource">The resource.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            resource
            or
            id
            </exception>
            <remarks>
            The id field can be null.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.PutAsync(System.String,`0)">
            <summary>
            Updates the resource asynchronously.
            </summary>
            <param name="id">The identifier.</param>
            <param name="resource">The resource.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            resource
            or
            id
            </exception>
        </member>
        <member name="P:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.Timeout">
            <summary>
            Gets or sets the timeout value.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.HttpClient">
            <summary>
            Gets the HTTP client.
            </summary>
            <value>
            The HTTP client.
            </value>
            <remarks>
            This property is not added onto the interface
            so as not to encourage direct use of the client.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.ApiRepositoryContract`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2">
            <summary>
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TK">The type of the k.</typeparam>
        </member>
        <member name="P:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.Context">
            <summary>
            Gets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.String)">
            <summary>
            Generic method to get a collection of Entities
            </summary>
            <param name="filter">Filter expression for the return Entities</param>
            <param name="orderBy">Represents the order of the return Entities</param>
            <param name="includeProperties">Include Properties for the navigation properties</param>
            <returns>A Enumerable of Entities</returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.String)">
            <summary>
            Gets the asynchronous.
            </summary>
            <param name="filter">The filter.</param>
            <param name="orderBy">The order by.</param>
            <param name="includeProperties">The include properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            Finds the specified match.
            </summary>
            <param name="filter">The filter.</param>
            <param name="includeProperties">The include properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.GetById(`1)">
            <summary>
            Generic Method to get an Entity by Identity
            </summary>
            <param name="id">The Identity of the Entity</param>
            <returns>
            The Entity
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.GetByIdAsync(`1,System.String)">
            <summary>
            Gets the by identifier asynchronous.
            </summary>
            <param name="id">The identifier.</param>
            <param name="includeProperties">The include properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.Insert(`0)">
            <summary>
            Generic method for add an Entity to the context
            </summary>
            <param name="entity">The Entity to Add</param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.InsertAsync(`0)">
            <summary>
            Inserts the asynchronous.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.Delete(`1)">
            <summary>
            Generic method for deleting a method in the context by identity
            </summary>
            <param name="id">The Identity of the Entity</param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.DeleteAsync(`0)">
            <summary>
            Deletes the asynchronous.
            </summary>
            <param name="entityToDelete">The entity to delete.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.Delete(`0)">
            <summary>
            Generic method for deleting a method in the context passing the Entity
            </summary>
            <param name="entityToDelete">Entity to Delete</param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.Update(`0,`1)">
            <summary>
            Generic method for updating an Entity in the context
            </summary>
            <param name="entityToUpdate">The entity to Update</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.UpdateAsync(`0,`1)">
            <summary>
            Updates the asynchronous.
            </summary>
            <param name="entityToUpdate">The entity to update.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.GetPagedElements``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean,System.String)">
            <summary>
            Generic implementation for get Paged Entities
            </summary>
            <typeparam name="TKey">Key for order Expression</typeparam>
            <param name="pageIndex">Index of the Page</param>
            <param name="pageCount">Number of Entities to get</param>
            <param name="orderByExpression">Order expression</param>
            <param name="ascending">If the order is ascending or descending</param>
            <param name="includeProperties">The include properties.</param>
            <returns>
            Enumerable of Entities matching the conditions
            </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.GetFromDatabaseWithQuery(System.String,System.Object[])">
            <summary>
            Execute query
            </summary>
            <param name="sqlQuery">The Query to be executed</param>
            <param name="parameters">The parameters</param>
            <returns>
            List of Entity
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.ExecuteInDatabaseByQuery(System.String,System.Object[])">
            <summary>
            Execute a command in database
            </summary>
            <param name="sqlCommand">The sql query</param>
            <param name="parameters">The parameters</param>
            <returns>integer representing the sql code</returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IEntityRepository`2.GetCount">
            <summary>
            Get count of Entities
            </summary>
            <returns></returns>
        </member>
        <member name="P:Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository.Get(System.Linq.Expressions.Expression{System.Func{Zanshin.Domain.Entities.GeoLocation,System.Boolean}},System.Func{System.Linq.IQueryable{Zanshin.Domain.Entities.GeoLocation},System.Linq.IOrderedQueryable{Zanshin.Domain.Entities.GeoLocation}},System.String)">
            <summary>
            Generic method to get a collection of Entities
            </summary>
            <param name="filter">Filter expression for the return Entities</param>
            <param name="orderBy">Represents the order of the return Entities</param>
            <param name="includeProperties">Include Properties for the navigation properties</param>
            <returns>A Enumerable of Entities</returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository.GetById(System.Int32)">
            <summary>
            Generic Method to get an Entity by Identity
            </summary>
            <param name="id">The Identity of the Entity</param>
            <returns>
            The Entity
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository.Insert(Zanshin.Domain.Entities.GeoLocation)">
            <summary>
            Generic method for add an Entity to the context
            </summary>
            <param name="entity">The Entity to Add</param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository.Delete(System.Int32)">
            <summary>
            Generic method for deleting a method in the context by identity
            </summary>
            <param name="id">The Identity of the Entity</param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository.Delete(Zanshin.Domain.Entities.GeoLocation)">
            <summary>
            Generic method for deleting a method in the context pasing the Entity
            </summary>
            <param name="entityToDelete">Entity to Delete</param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository.Update(Zanshin.Domain.Entities.GeoLocation)">
            <summary>
            Generic method for updating an Entity in the context
            </summary>
            <param name="entityToUpdate">The story to Update</param>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository.GetPagedElements``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{Zanshin.Domain.Entities.GeoLocation,``0}},System.Boolean)">
            <summary>
            Generic implementation for get Paged Entities
            </summary>
            <typeparam name="TKey">Key for order Expression</typeparam>
            <param name="pageIndex">Index of the Page</param>
            <param name="pageCount">Number of Entities to get</param>
            <param name="orderByExpression">Order expression</param>
            <param name="orderby">if set to <c>true</c> [orderby].</param>
            <returns>
            Enumerable of Entities matching the conditions
            </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository.GetPagedElements``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{Zanshin.Domain.Entities.GeoLocation,``0}},System.Boolean,System.String)">
            <summary>
            Generic implementation for get Paged Entities
            </summary>
            <typeparam name="TKey">Key for order Expression</typeparam>
            <param name="pageIndex">Index of the Page</param>
            <param name="pageCount">Number of Entities to get</param>
            <param name="orderByExpression">Order expression</param>
            <param name="ascending">If the order is ascending or descending</param>
            <param name="includeProperties">Includes</param>
            <returns>
            Enumerable of Entities matching the conditions
            </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository.GetFromDatabaseWithQuery(System.String,System.Object[])">
            <summary>
            Execute query
            </summary>
            <param name="sqlQuery">The Query to be executed</param>
            <param name="parameters">The parameters</param>
            <returns>
            List of Entity
            </returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository.ExecuteInDatabaseByQuery(System.String,System.Object[])">
            <summary>
            Execute a command in database
            </summary>
            <param name="sqlCommand">The sql query</param>
            <param name="parameters">The parameters</param>
            <returns>integer representing the sql code</returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository.GetCount">
            <summary>
            Get count of Entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository.AddIfNotExists(Zanshin.Domain.Entities.GeoLocation)">
            <summary>
            Adds if not exists.
            </summary>
            <param name="geoLocation">The geo location.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.AssemblyLocator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Services.AssemblyLocator"/> class.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Services.AssemblyLocator.LoadAssemblies">
            <summary>
            Loads the assemblies.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Services.AssemblyLocator.AllAssemblies">
            <summary>
            Gets the assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Zanshin.Domain.Services.AssemblyLocator.BinFolderAssemblies">
            <summary>
            Gets the bin folder assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Zanshin.Domain.Services.AssemblyLocator.PotentialDependencyAssemblies">
            <summary>
            Gets the potential dependency assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Zanshin.Domain.Services.AssemblyLocator.Messages">
            <summary>
            Gets or sets the messages.
            </summary>
            <value>
            The messages.
            </value>
        </member>
        <member name="T:Zanshin.Domain.Services.CacheService">
            <summary>
              Ioc ready caching service.
            </summary>
            <remarks>
            Applications that are not hosted in a web aware host should not use this service.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.#ctor(Zanshin.Domain.Factories.Interfaces.ICacheItemPropertiesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Services.CacheService" /> class.
            </summary>
            <param name="cacheItemsPropertiesFactory">The cache items properties factory.</param>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.Initialize">
            <summary>
              Initializes this instance.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Services.CacheService.Item(System.String)">
            <summary>
              Gets or sets the <see cref="T:System.Object" /> with the specified name.
            </summary>
            <value> </value>
            <exception cref="T:System.ApplicationException">Cannot create cache object
              from
              <see langword="null" />
              context.</exception>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.TryGet``1(System.String,System.Func{``0},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not exist, tries to invoke
             the passed Func which should place the item in cache, and return the '
            now cached value. If the call fails, this method will return default(T).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="cacheItemProperties">The cache item properties.</param>
            <returns></returns>
            <remarks>The string key is not checked in this method as the contains method
            does that check and this always calls that method.</remarks>
            <exception cref="T:System.ArgumentNullException">expression</exception>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.Add(System.String,System.Object)">
            <summary>
              Adds the specified key.
            </summary>
            <param name="key"> The key. </param>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.Add(System.String,System.Object,System.DateTime)">
            <summary>
              Adds the specified key.
            </summary>
            <param name="key"> The key. </param>
            <param name="value"> The value. </param>
            <param name="absoluteExpiration"> The absolute expiration. </param>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds the item with the specified key to the cache with the
            designated sliding expiration.
            </summary>
            <param name="key"> The key. </param>
            <param name="value"> The value. </param>
            <param name="slidingExpiration"> The sliding expiration. </param>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Delegate)">
            <summary>
             Adds the item with the specified key to the cache with full control
            over all aspects of the cache insertion.
            </summary>
            <param name="key"> The key. </param>
            <param name="value"> The value. </param>
            <param name="dependencies"> The dependencies. </param>
            <param name="absoluteExpiration"> The absolute expiration. </param>
            <param name="slidingExpiration"> The sliding expiration. </param>
            <param name="priority"> The priority. </param>
            <param name="onRemoveCallback"> The on remove callback. </param>
            <exception cref="T:System.ArgumentNullException">Argument is
              <see langword="null" />
              .</exception>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Delegate)">
            <summary>
              Inserts the specified key.
            </summary>
            <param name="key"> The key. </param>
            <param name="value"> The value. </param>
            <param name="dependencies"> The dependencies. </param>
            <param name="absoluteExpiration"> The absolute expiration. </param>
            <param name="slidingExpiration"> The sliding expiration. </param>
            <param name="priority"> The priority. </param>
            <param name="onRemoveCallback"> The on remove callback. </param>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.TryGet``2(System.String,``0,System.Func{``0,``1},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return default(T).
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.TryGet``3(System.String,``0,``1,System.Func{``0,``1,``2},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return null.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.TryGet``4(System.String,``0,``1,``2,System.Func{``0,``1,``2,``3},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return null.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="t3">The t3.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.TryGet``5(System.String,``0,``1,``2,``3,System.Func{``0,``1,``2,``3,``4},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return null.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="t3">The t3.</param>
            <param name="t4">The t4.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.TryGet``6(System.String,``0,``1,``2,``3,``4,System.Func{``0,``1,``2,``3,``4,``5},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return null.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="t3">The t3.</param>
            <param name="t4">The t4.</param>
            <param name="t5">The t5.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.TryGet``7(System.String,``0,``1,``2,``3,``4,``5,System.Func{``0,``1,``2,``3,``4,``5,``6},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return null.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="t3">The t3.</param>
            <param name="t4">The t4.</param>
            <param name="t5">The t5.</param>
            <param name="t6">The t6.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.TryGet``8(System.String,``0,``1,``2,``3,``4,``5,``6,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return null.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="t3">The t3.</param>
            <param name="t4">The t4.</param>
            <param name="t5">The t5.</param>
            <param name="t6">The t6.</param>
            <param name="t7">The t7.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.Remove(System.String)">
            <summary>
            Removes the item assigned the supplied key
            </summary>
            <param name="key"> The key. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.Contains(System.String)">
            <summary>
              Determines whether [contains] [the specified key].
            </summary>
            <param name="key"> The key. </param>
            <returns> <c>true</c> if [contains] [the specified key]; otherwise, <c>false</c> . </returns>
            <remarks>
              Should NEVER throw!
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.CacheService.Invalidate(System.String)">
            <summary>
              Invalidates the specified key.
            </summary>
            <param name="key"> The key. </param>
            <exception cref="T:System.ArgumentNullException">Argument is
              <see langword="null" />
              .</exception>
        </member>
        <member name="P:Zanshin.Domain.Services.CacheService.Count">
            <summary>
              Gets the count.
            </summary>
            <value> The count. </value>
        </member>
        <member name="P:Zanshin.Domain.Services.CacheService.NoAbsoluteExpiration">
            <summary>
              Gets the no absolute expiration.
            </summary>
            <value> The no absolute expiration. </value>
        </member>
        <member name="P:Zanshin.Domain.Services.CacheService.NoSlidingExpiration">
            <summary>
              Gets the no sliding expiration.
            </summary>
            <value> The no sliding expiration. </value>
        </member>
        <member name="P:Zanshin.Domain.Services.CacheService.CacheExpiration">
            <summary>
              Gets or sets the cache expiration.
            </summary>
            <value> The cache expiration. </value>
        </member>
        <member name="M:Zanshin.Domain.Services.ControllerRegistrationService.#ctor(Zanshin.Domain.Services.Interfaces.IAssemblyDiscoveryService)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Services.ControllerRegistrationService"/> class.
            </summary>
            <param name="assemblyDiscoveryService">The dependency discovery service.</param>
        </member>
        <member name="M:Zanshin.Domain.Services.ControllerRegistrationService.RegisterControllers">
            <summary>
            Registers the controllers.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Services.AssemblyDiscoveryService">
            <summary>
            Gets a collection of Assemblies in the specified bin directory that 
            are not on the ignored assemblies list.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Services.AssemblyDiscoveryService.#ctor(Zanshin.Domain.Helpers.Interfaces.IConfigurationWrapper)">
            <summary>
            is the dependency discovery service.
            </summary>
            <param name="configurationWrapper">The configuration wrapper.</param>
            <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain. </exception>
        </member>
        <member name="M:Zanshin.Domain.Services.AssemblyDiscoveryService.GenerateDependencyList">
            <summary>
            Generates the dependency list.
            </summary>
            <exception cref="T:System.ApplicationException">Could not find assembly path for  + name</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Services.AssemblyDiscoveryService.GetBaseDirectoryAssemblyList">
            <summary>
            Gets the base directory assembly list.
            </summary>
            <returns></returns>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.ArgumentNullException">directory</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:Zanshin.Domain.Services.AssemblyDiscoveryService.LoadAssemblyFromPath(System.String)">
            <summary>
            Loads the assembly from path.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:Zanshin.Domain.Exceptions.ParameterNullException">name</exception>
            <exception cref="T:System.ApplicationException">Could not find assembly path for  + name</exception>
        </member>
        <member name="P:Zanshin.Domain.Services.AssemblyDiscoveryService.AssemblyList">
            <summary>
            Gets or sets the assembly list.
            </summary>
            <value>
            The assembly list.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Services.EmailService.SendAsync(Microsoft.AspNet.Identity.IdentityMessage)">
            <summary>
            This method should send the message
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.GeoLocationService.#ctor(Zanshin.Domain.Repositories.Interfaces.IGeoLocationRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Services.GeoLocationService" /> class.
            </summary>
            <param name="geoLocationRepository">The geo location repository.</param>
        </member>
        <member name="M:Zanshin.Domain.Services.GeoLocationService.Fetch(System.String,System.Boolean)">
            <summary>
            Fetches the specified ipaddress.
            </summary>
            <param name="ipaddress">The ipaddress.</param>
            <param name="persistLocation">if set to <c>true</c> [persist location].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">ipaddress</exception>
        </member>
        <member name="M:Zanshin.Domain.Services.HashService.CreateSha256Hash(System.String)">
            <summary>
            Creates the sh a256 hash.
            </summary>
            <param name="stringToHash">The string to hash.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.HashService.HashString(System.String)">
            <summary>
              Creates the hash string.
            </summary>
            <param name="stringToHash"> The string to hash. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Services.HashService.CreateHash(System.String)">
            <summary>
              Creates the hash.
            </summary>
            <param name="stringToHash"> The string to hash. </param>
            <returns> </returns>
            <remarks>Uses the SHA1Managed hash</remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.HashService.ByteArrayToString(System.Byte[])">
            <summary>
              Bytes the array to string.
            </summary>
            <param name="arrInput"> The arr input. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Services.IgnoredAssemblies.IsMatch(System.String)">
            <summary>
            Determines whether the specified filter is match.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.IgnoredAssemblies.Add(System.Text.RegularExpressions.Regex)">
            <summary>
            Adds the specified s.
            </summary>
            <param name="s">The s.</param>
        </member>
        <member name="P:Zanshin.Domain.Services.IgnoredAssemblies.Instance">
            <summary>
              Gets the instance.
            </summary>
            <value> The instance. </value>
        </member>
        <member name="M:Zanshin.Domain.Services.IgnoredAssemblies.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns> A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection. </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Zanshin.Domain.Services.IgnoredAssemblies.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection. </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Zanshin.Domain.Services.Interfaces.IAssemblyDiscoveryService">
            <summary>
            Gets a collection of Assemblies in the specified bin directory that 
            are not on the ignored assemblies list.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.IAssemblyDiscoveryService.GenerateDependencyList">
            <summary>
            Generates the dependency list.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Services.Interfaces.IAssemblyDiscoveryService.AssemblyList">
            <summary>
            Gets or sets the assembly list.
            </summary>
            <value>
            The assembly list.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.IControllerRegistrationService.RegisterControllers">
            <summary>
            Registers the controllers.
            </summary>
        </member>
        <member name="T:Zanshin.Domain.Services.Interfaces.ICacheService">
            <summary>
            
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Services.Interfaces.ICacheService.Item(System.String)">
            <summary>
              Gets or sets the <see cref="T:System.Object" /> with the specified name.
            </summary>
            <value> </value>
        </member>
        <member name="P:Zanshin.Domain.Services.Interfaces.ICacheService.Count">
            <summary>
              Gets the count.
            </summary>
            <value> The count. </value>
        </member>
        <member name="P:Zanshin.Domain.Services.Interfaces.ICacheService.NoAbsoluteExpiration">
            <summary>
              Gets the no absolute expiration.
            </summary>
            <value> The no absolute expiration. </value>
        </member>
        <member name="P:Zanshin.Domain.Services.Interfaces.ICacheService.NoSlidingExpiration">
            <summary>
              Gets the no sliding expiration.
            </summary>
            <value> The no sliding expiration. </value>
        </member>
        <member name="P:Zanshin.Domain.Services.Interfaces.ICacheService.CacheExpiration">
            <summary>
              Gets or sets the cache expiration.
            </summary>
            <value> The cache expiration. </value>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.TryGet``1(System.String,System.Func{``0},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not exist, tries to invoke
             the passed Func which should place the item in cache, and return the '
            now cached value. If the call fails, this method will return default(T).
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="key">The key.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="cacheItemProperties">The cache item properties.</param>
            <returns></returns>
            <remarks>The string key is not checked in this method as the contains method
            does that check and this always calls that method.</remarks>
            <exception cref="T:System.ArgumentNullException">expression</exception>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.Add(System.String,System.Object)">
            <summary>
              Adds the specified key.
            </summary>
            <param name="key"> The key. </param>
            <param name="value"> The value. </param>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.Add(System.String,System.Object,System.DateTime)">
            <summary>
              Adds the specified key.
            </summary>
            <param name="key"> The key. </param>
            <param name="value"> The value. </param>
            <param name="absoluteExpiration"> The absolute expiration. </param>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            Adds the item with the specified key to the cache with the
            designated sliding expiration.
            </summary>
            <param name="key"> The key. </param>
            <param name="value"> The value. </param>
            <param name="slidingExpiration"> The sliding expiration. </param>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Delegate)">
            <summary>
             Adds the item with the specified key to the cache with full control
            over all aspects of the cache insertion.
            </summary>
            <param name="key"> The key. </param>
            <param name="value"> The value. </param>
            <param name="dependencies"> The dependencies. </param>
            <param name="absoluteExpiration"> The absolute expiration. </param>
            <param name="slidingExpiration"> The sliding expiration. </param>
            <param name="priority"> The priority. </param>
            <param name="onRemoveCallback"> The on remove callback. </param>
            <exception cref="T:System.ArgumentNullException">Argument is
              <see langword="null" />
              .</exception>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Delegate)">
            <summary>
              Inserts the specified key.
            </summary>
            <param name="key"> The key. </param>
            <param name="value"> The value. </param>
            <param name="dependencies"> The dependencies. </param>
            <param name="absoluteExpiration"> The absolute expiration. </param>
            <param name="slidingExpiration"> The sliding expiration. </param>
            <param name="priority"> The priority. </param>
            <param name="onRemoveCallback"> The on remove callback. </param>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.TryGet``2(System.String,``0,System.Func{``0,``1},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return default(T).
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.TryGet``3(System.String,``0,``1,System.Func{``0,``1,``2},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return null.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.TryGet``4(System.String,``0,``1,``2,System.Func{``0,``1,``2,``3},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return null.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="t3">The t3.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.TryGet``5(System.String,``0,``1,``2,``3,System.Func{``0,``1,``2,``3,``4},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return null.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="t3">The t3.</param>
            <param name="t4">The t4.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.TryGet``6(System.String,``0,``1,``2,``3,``4,System.Func{``0,``1,``2,``3,``4,``5},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return null.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="t3">The t3.</param>
            <param name="t4">The t4.</param>
            <param name="t5">The t5.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.TryGet``7(System.String,``0,``1,``2,``3,``4,``5,System.Func{``0,``1,``2,``3,``4,``5,``6},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return null.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="t3">The t3.</param>
            <param name="t4">The t4.</param>
            <param name="t5">The t5.</param>
            <param name="t6">The t6.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.TryGet``8(System.String,``0,``1,``2,``3,``4,``5,``6,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},Zanshin.Domain.Filters.Interfaces.ICacheItemProperties)">
            <summary>
            Tries to get the item from cache, if it does not
            exist, tries to invoke the passed Func which should place the
            item in cache, and return the now cached value. If the call fails,
            this method will return null.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="T7">The type of the 7.</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="key">The key.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="t3">The t3.</param>
            <param name="t4">The t4.</param>
            <param name="t5">The t5.</param>
            <param name="t6">The t6.</param>
            <param name="t7">The t7.</param>
            <param name="serviceFunc">The service func.</param>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.Remove(System.String)">
            <summary>
            Removes the item assigned the supplied key
            </summary>
            <param name="key"> The key. </param>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.Contains(System.String)">
            <summary>
              Determines whether [contains] [the specified key].
            </summary>
            <param name="key"> The key. </param>
            <returns> <c>true</c> if [contains] [the specified key]; otherwise, <c>false</c> . </returns>
            <remarks>
              Should NEVER throw!
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.ICacheService.Invalidate(System.String)">
            <summary>
              Invalidates the specified key.
            </summary>
            <param name="key"> The key. </param>
            <exception cref="T:System.ArgumentNullException">Argument is
              <see langword="null" />
              .</exception>
            <exception cref="T:System.InvalidOperationException">Cannot delete a value from a disabled cache.</exception>
        </member>
        <member name="M:Zanshin.Domain.Services.Interfaces.IGeoLocationService.Fetch(System.String,System.Boolean)">
            <summary>
            Fetches the specified ipaddress.
            </summary>
            <param name="ipaddress">The ipaddress.</param>
            <param name="persistLocation">if set to <c>true</c> [persist location].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">ipaddress</exception>
        </member>
        <member name="T:Zanshin.Domain.Services.Ioc">
            <summary>
            An implementation of the IContainer interface using Castle Windsor as the 
            container.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Services.Ioc.Instance">
            <summary>
              Gets the instance.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Services.Ioc.WindsorContainer">
            <summary>
              Gets the Windsor container.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.AddComponent(System.String,System.Type)">
            <summary>
            Adds the component.
            </summary>
            <param name="key">The key.</param>
            <param name="classType">Type of the class.</param>
            <exception cref="T:System.ArgumentNullException">
            key
            or
            classType
            </exception>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.AddComponent(System.String,System.Type,System.Type)">
            <summary>
            Adds the component.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="classType">Type of the class.</param>
            <exception cref="T:System.ArgumentNullException">
            serviceType
            or
            classType
            or
            key
            </exception>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.AddComponentWithLifestyle(System.String,System.Type,Castle.Core.LifestyleType)">
            <summary>
            Adds the component with lifestyle.
            </summary>
            <param name="key">The key.</param>
            <param name="classType">Type of the class.</param>
            <param name="lifestyle">The lifestyle.</param>
            <exception cref="T:System.ArgumentNullException">
            classType
            or
            key
            </exception>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.AddComponentWithLifestyle(System.String,System.Type,System.Type,Castle.Core.LifestyleType)">
            <summary>
            Adds the component with lifestyle.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="classType">Type of the class.</param>
            <param name="lifestyle">The lifestyle.</param>
            <exception cref="T:System.ArgumentNullException">
            serviceType
            or
            classType
            or
            key
            </exception>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.AddComponent``1">
            <summary>
              Adds the component.
            </summary>
            <typeparam name="T"> </typeparam>
            <remarks>
              This method is thread-safe.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.AddComponent``1(System.String)">
            <summary>
            Adds the component.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.AddComponentWithLifestyle``1(Castle.Core.LifestyleType)">
            <summary>
              Adds the component with lifestyle.
            </summary>
            <typeparam name="T"> </typeparam>
            <param name="lifestyle"> The lifestyle. </param>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.AddComponentWithLifestyle``1(System.String,Castle.Core.LifestyleType)">
            <summary>
            Adds the component with lifestyle.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="lifestyle">The lifestyle.</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.AddComponent``2">
            <summary>
              Adds the component.
            </summary>
            <typeparam name="T"> </typeparam>
            <typeparam name="TU"> The type of the U. </typeparam>
            <remarks>
              This method is thread-safe.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.AddComponent``2(System.String)">
            <summary>
            Adds the component.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TU">The type of the U.</typeparam>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.AddComponentWithLifestyle``2(Castle.Core.LifestyleType)">
            <summary>
              Adds the component with lifestyle.
            </summary>
            <typeparam name="T"> </typeparam>
            <typeparam name="TU"> The type of the U. </typeparam>
            <param name="lifestyle"> The lifestyle. </param>
            <remarks>
              This method is thread-safe.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.AddComponentWithLifestyle``2(System.String,Castle.Core.LifestyleType)">
            <summary>
            Adds the component with lifestyle.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TU">The type of the U.</typeparam>
            <param name="key">The key.</param>
            <param name="lifestyle">The lifestyle.</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
            <remarks>
            This method is thread-safe.
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.AddComponentWithDependency``2(System.String,Castle.Core.LifestyleType,System.String,System.Object)">
            <summary>
            Adds the component with dependency (dependency can be a constructor parameter or public property).
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TU">The type of the U.</typeparam>
            <param name="key">The key.</param>
            <param name="lifestyle">The lifestyle.</param>
            <param name="dependencyPropertyName">Name of the dependency property.</param>
            <param name="dependencyPropertyValue">The dependency property value.</param>
            <exception cref="T:System.ArgumentNullException">
            dependencyPropertyValue
            or key or key
            </exception>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.Resolve(System.String,System.Type)">
            <summary>
            Resolves an object with the specified key and specified service
            </summary>
            <param name="key">The key.</param>
            <param name="service">The service.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            service
            or
            key
            </exception>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.ResolveAsync(System.String,System.Type)">
            <summary>
            Resolves an object with the specified key and specified service asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="service">The service.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            service
            or
            key
            </exception>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.Resolve(System.String)">
            <summary>
            Resolves the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">key</exception>
            <exception cref="T:Castle.MicroKernel.ComponentNotFoundException">
            key
            or
            key
            </exception>
            <exception cref="T:System.ArgumentNullException">The value of 'key' cannot be null.</exception>
            <exception cref="T:Castle.MicroKernel.ComponentNotFoundException">key</exception>
            <remarks>
            This method is dangerous! Be sure you know what you are doing if you use it!
            </remarks>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.Resolve(System.Type)">
            <summary>
            Resolves the specified service.
            </summary>
            <param name="service">The service.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">service</exception>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.Release(System.Object)">
            <summary>
              Releases the specified instance.
            </summary>
            <param name="instanceParam"> The instance. </param>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.ReleaseAsync(System.Object)">
            <summary>
            Releases the specified instance asynchronously.
            </summary>
            <param name="instanceParam">The instance parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.Resolve``1">
            <summary>
            Resolves an object specified type T.
            </summary>
            <typeparam name="T"> </typeparam>
            <returns> </returns>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.ResolveAsync``1">
            <summary>
            Resolves an object specified type T asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.Resolve``1(System.String)">
            <summary>
            Resolves an object with the specified key and type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.Replace(System.String,System.Type,System.Type,Castle.Core.LifestyleType)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="classType">Type of the class.</param>
            <param name="lifestyle">The lifestyle.</param>
            <exception cref="T:System.ArgumentNullException">
            serviceType
            or
            classType
            or
            key
            </exception>
            <exception cref="T:System.ArgumentNullException">The value of 'serviceType' cannot be null.</exception>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.Initialize">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Services.Ioc"/> class.
            </summary>
        </member>
        <member name="P:Zanshin.Domain.Services.Ioc.RegisteredComponent.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Services.Ioc.RegisteredComponent.ServiceType">
            <summary>
            Gets or sets the type of the service.
            </summary>
            <value>
            The type of the service.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Services.Ioc.RegisteredComponent.ClassType">
            <summary>
            Gets or sets the type of the class.
            </summary>
            <value>
            The type of the class.
            </value>
        </member>
        <member name="P:Zanshin.Domain.Services.Ioc.RegisteredComponent.LifeStyle">
            <summary>
            Gets or sets the life style.
            </summary>
            <value>
            The life style.
            </value>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.RegisteredComponents.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Zanshin.Domain.Services.Ioc.RegisteredComponents"/> class.
            </summary>
        </member>
        <member name="M:Zanshin.Domain.Services.Ioc.RegisteredComponents.AddComponent(Zanshin.Domain.Services.Ioc.RegisteredComponent)">
            <summary>
            Adds the component.
            </summary>
            <param name="registeredComponent">The registered component.</param>
            <exception cref="T:System.ArgumentNullException">The value of 'registeredComponent' cannot be null. </exception>
        </member>
        <member name="M:Zanshin.Domain.Services.SmsService.SendAsync(Microsoft.AspNet.Identity.IdentityMessage)">
            <summary>
            This method should send the message
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
    </members>
</doc>
